// Copyright 2021-2025 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: cerbos/cloud/store/v1/store.proto

package storev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileError_Cause int32

const (
	FileError_CAUSE_UNSPECIFIED                FileError_Cause = 0
	FileError_CAUSE_INVALID_FILE_PATH          FileError_Cause = 1
	FileError_CAUSE_UNSUPPORTED_FILE_EXTENSION FileError_Cause = 2
	FileError_CAUSE_INVALID_FILE_CONTENTS      FileError_Cause = 3
	FileError_CAUSE_DUPLICATE_FILE_PATH        FileError_Cause = 4
	FileError_CAUSE_FILE_TOO_LARGE             FileError_Cause = 5
)

// Enum value maps for FileError_Cause.
var (
	FileError_Cause_name = map[int32]string{
		0: "CAUSE_UNSPECIFIED",
		1: "CAUSE_INVALID_FILE_PATH",
		2: "CAUSE_UNSUPPORTED_FILE_EXTENSION",
		3: "CAUSE_INVALID_FILE_CONTENTS",
		4: "CAUSE_DUPLICATE_FILE_PATH",
		5: "CAUSE_FILE_TOO_LARGE",
	}
	FileError_Cause_value = map[string]int32{
		"CAUSE_UNSPECIFIED":                0,
		"CAUSE_INVALID_FILE_PATH":          1,
		"CAUSE_UNSUPPORTED_FILE_EXTENSION": 2,
		"CAUSE_INVALID_FILE_CONTENTS":      3,
		"CAUSE_DUPLICATE_FILE_PATH":        4,
		"CAUSE_FILE_TOO_LARGE":             5,
	}
)

func (x FileError_Cause) Enum() *FileError_Cause {
	p := new(FileError_Cause)
	*p = x
	return p
}

func (x FileError_Cause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileError_Cause) Descriptor() protoreflect.EnumDescriptor {
	return file_cerbos_cloud_store_v1_store_proto_enumTypes[0].Descriptor()
}

func (FileError_Cause) Type() protoreflect.EnumType {
	return &file_cerbos_cloud_store_v1_store_proto_enumTypes[0]
}

func (x FileError_Cause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileError_Cause.Descriptor instead.
func (FileError_Cause) EnumDescriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{10, 0}
}

type StringMatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Match:
	//
	//	*StringMatch_Equals
	//	*StringMatch_Like
	//	*StringMatch_In
	Match         isStringMatch_Match `protobuf_oneof:"match"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringMatch) Reset() {
	*x = StringMatch{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringMatch) ProtoMessage() {}

func (x *StringMatch) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringMatch.ProtoReflect.Descriptor instead.
func (*StringMatch) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{0}
}

func (x *StringMatch) GetMatch() isStringMatch_Match {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *StringMatch) GetEquals() string {
	if x != nil {
		if x, ok := x.Match.(*StringMatch_Equals); ok {
			return x.Equals
		}
	}
	return ""
}

func (x *StringMatch) GetLike() string {
	if x != nil {
		if x, ok := x.Match.(*StringMatch_Like); ok {
			return x.Like
		}
	}
	return ""
}

func (x *StringMatch) GetIn() *StringMatch_InList {
	if x != nil {
		if x, ok := x.Match.(*StringMatch_In); ok {
			return x.In
		}
	}
	return nil
}

type isStringMatch_Match interface {
	isStringMatch_Match()
}

type StringMatch_Equals struct {
	Equals string `protobuf:"bytes,1,opt,name=equals,proto3,oneof"`
}

type StringMatch_Like struct {
	Like string `protobuf:"bytes,2,opt,name=like,proto3,oneof"`
}

type StringMatch_In struct {
	In *StringMatch_InList `protobuf:"bytes,3,opt,name=in,proto3,oneof"`
}

func (*StringMatch_Equals) isStringMatch_Match() {}

func (*StringMatch_Like) isStringMatch_Match() {}

func (*StringMatch_In) isStringMatch_Match() {}

type FileFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          *StringMatch           `protobuf:"bytes,1,opt,name=path,proto3,oneof" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileFilter) Reset() {
	*x = FileFilter{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileFilter) ProtoMessage() {}

func (x *FileFilter) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileFilter.ProtoReflect.Descriptor instead.
func (*FileFilter) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{1}
}

func (x *FileFilter) GetPath() *StringMatch {
	if x != nil {
		return x.Path
	}
	return nil
}

type ListFilesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StoreId       string                 `protobuf:"bytes,1,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	Filter        *FileFilter            `protobuf:"bytes,2,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFilesRequest) Reset() {
	*x = ListFilesRequest{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesRequest) ProtoMessage() {}

func (x *ListFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesRequest.ProtoReflect.Descriptor instead.
func (*ListFilesRequest) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{2}
}

func (x *ListFilesRequest) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *ListFilesRequest) GetFilter() *FileFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListFilesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StoreVersion  int64                  `protobuf:"varint,1,opt,name=store_version,json=storeVersion,proto3" json:"store_version,omitempty"`
	Files         []string               `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFilesResponse) Reset() {
	*x = ListFilesResponse{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesResponse) ProtoMessage() {}

func (x *ListFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesResponse.ProtoReflect.Descriptor instead.
func (*ListFilesResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{3}
}

func (x *ListFilesResponse) GetStoreVersion() int64 {
	if x != nil {
		return x.StoreVersion
	}
	return 0
}

func (x *ListFilesResponse) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

type GetFilesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StoreId       string                 `protobuf:"bytes,1,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	Files         []string               `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFilesRequest) Reset() {
	*x = GetFilesRequest{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilesRequest) ProtoMessage() {}

func (x *GetFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilesRequest.ProtoReflect.Descriptor instead.
func (*GetFilesRequest) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{4}
}

func (x *GetFilesRequest) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *GetFilesRequest) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

type File struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Contents      []byte                 `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *File) Reset() {
	*x = File{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{5}
}

func (x *File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *File) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

type GetFilesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StoreVersion  int64                  `protobuf:"varint,1,opt,name=store_version,json=storeVersion,proto3" json:"store_version,omitempty"`
	Files         []*File                `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFilesResponse) Reset() {
	*x = GetFilesResponse{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilesResponse) ProtoMessage() {}

func (x *GetFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilesResponse.ProtoReflect.Descriptor instead.
func (*GetFilesResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{6}
}

func (x *GetFilesResponse) GetStoreVersion() int64 {
	if x != nil {
		return x.StoreVersion
	}
	return 0
}

func (x *GetFilesResponse) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

type ChangeDetails struct {
	state       protoimpl.MessageState  `protogen:"open.v1"`
	Description string                  `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Uploader    *ChangeDetails_Uploader `protobuf:"bytes,2,opt,name=uploader,proto3" json:"uploader,omitempty"`
	// Types that are valid to be assigned to Origin:
	//
	//	*ChangeDetails_Git_
	//	*ChangeDetails_Internal_
	Origin        isChangeDetails_Origin `protobuf_oneof:"origin"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeDetails) Reset() {
	*x = ChangeDetails{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeDetails) ProtoMessage() {}

func (x *ChangeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeDetails.ProtoReflect.Descriptor instead.
func (*ChangeDetails) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{7}
}

func (x *ChangeDetails) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChangeDetails) GetUploader() *ChangeDetails_Uploader {
	if x != nil {
		return x.Uploader
	}
	return nil
}

func (x *ChangeDetails) GetOrigin() isChangeDetails_Origin {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *ChangeDetails) GetGit() *ChangeDetails_Git {
	if x != nil {
		if x, ok := x.Origin.(*ChangeDetails_Git_); ok {
			return x.Git
		}
	}
	return nil
}

func (x *ChangeDetails) GetInternal() *ChangeDetails_Internal {
	if x != nil {
		if x, ok := x.Origin.(*ChangeDetails_Internal_); ok {
			return x.Internal
		}
	}
	return nil
}

type isChangeDetails_Origin interface {
	isChangeDetails_Origin()
}

type ChangeDetails_Git_ struct {
	Git *ChangeDetails_Git `protobuf:"bytes,3,opt,name=git,proto3,oneof"`
}

type ChangeDetails_Internal_ struct {
	Internal *ChangeDetails_Internal `protobuf:"bytes,4,opt,name=internal,proto3,oneof"`
}

func (*ChangeDetails_Git_) isChangeDetails_Origin() {}

func (*ChangeDetails_Internal_) isChangeDetails_Origin() {}

type FileOp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Op:
	//
	//	*FileOp_AddOrUpdate
	//	*FileOp_Delete
	Op            isFileOp_Op `protobuf_oneof:"op"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileOp) Reset() {
	*x = FileOp{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileOp) ProtoMessage() {}

func (x *FileOp) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileOp.ProtoReflect.Descriptor instead.
func (*FileOp) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{8}
}

func (x *FileOp) GetOp() isFileOp_Op {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *FileOp) GetAddOrUpdate() *File {
	if x != nil {
		if x, ok := x.Op.(*FileOp_AddOrUpdate); ok {
			return x.AddOrUpdate
		}
	}
	return nil
}

func (x *FileOp) GetDelete() string {
	if x != nil {
		if x, ok := x.Op.(*FileOp_Delete); ok {
			return x.Delete
		}
	}
	return ""
}

type isFileOp_Op interface {
	isFileOp_Op()
}

type FileOp_AddOrUpdate struct {
	AddOrUpdate *File `protobuf:"bytes,1,opt,name=add_or_update,json=addOrUpdate,proto3,oneof"`
}

type FileOp_Delete struct {
	Delete string `protobuf:"bytes,2,opt,name=delete,proto3,oneof"`
}

func (*FileOp_AddOrUpdate) isFileOp_Op() {}

func (*FileOp_Delete) isFileOp_Op() {}

type ModifyFilesRequest struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	StoreId       string                        `protobuf:"bytes,1,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	Condition     *ModifyFilesRequest_Condition `protobuf:"bytes,2,opt,name=condition,proto3,oneof" json:"condition,omitempty"`
	Operations    []*FileOp                     `protobuf:"bytes,3,rep,name=operations,proto3" json:"operations,omitempty"`
	ChangeDetails *ChangeDetails                `protobuf:"bytes,4,opt,name=change_details,json=changeDetails,proto3,oneof" json:"change_details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModifyFilesRequest) Reset() {
	*x = ModifyFilesRequest{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyFilesRequest) ProtoMessage() {}

func (x *ModifyFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyFilesRequest.ProtoReflect.Descriptor instead.
func (*ModifyFilesRequest) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{9}
}

func (x *ModifyFilesRequest) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *ModifyFilesRequest) GetCondition() *ModifyFilesRequest_Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *ModifyFilesRequest) GetOperations() []*FileOp {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ModifyFilesRequest) GetChangeDetails() *ChangeDetails {
	if x != nil {
		return x.ChangeDetails
	}
	return nil
}

type FileError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	File          string                 `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Cause         FileError_Cause        `protobuf:"varint,2,opt,name=cause,proto3,enum=cerbos.cloud.store.v1.FileError_Cause" json:"cause,omitempty"`
	Details       string                 `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileError) Reset() {
	*x = FileError{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileError) ProtoMessage() {}

func (x *FileError) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileError.ProtoReflect.Descriptor instead.
func (*FileError) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{10}
}

func (x *FileError) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *FileError) GetCause() FileError_Cause {
	if x != nil {
		return x.Cause
	}
	return FileError_CAUSE_UNSPECIFIED
}

func (x *FileError) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type ModifyFilesResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	NewStoreVersion int64                  `protobuf:"varint,1,opt,name=new_store_version,json=newStoreVersion,proto3" json:"new_store_version,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ModifyFilesResponse) Reset() {
	*x = ModifyFilesResponse{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyFilesResponse) ProtoMessage() {}

func (x *ModifyFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyFilesResponse.ProtoReflect.Descriptor instead.
func (*ModifyFilesResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{11}
}

func (x *ModifyFilesResponse) GetNewStoreVersion() int64 {
	if x != nil {
		return x.NewStoreVersion
	}
	return 0
}

type ReplaceFilesRequest struct {
	state          protoimpl.MessageState         `protogen:"open.v1"`
	StoreId        string                         `protobuf:"bytes,1,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	Condition      *ReplaceFilesRequest_Condition `protobuf:"bytes,2,opt,name=condition,proto3,oneof" json:"condition,omitempty"`
	ZippedContents []byte                         `protobuf:"bytes,3,opt,name=zipped_contents,json=zippedContents,proto3" json:"zipped_contents,omitempty"`
	ChangeDetails  *ChangeDetails                 `protobuf:"bytes,4,opt,name=change_details,json=changeDetails,proto3,oneof" json:"change_details,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ReplaceFilesRequest) Reset() {
	*x = ReplaceFilesRequest{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceFilesRequest) ProtoMessage() {}

func (x *ReplaceFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceFilesRequest.ProtoReflect.Descriptor instead.
func (*ReplaceFilesRequest) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{12}
}

func (x *ReplaceFilesRequest) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *ReplaceFilesRequest) GetCondition() *ReplaceFilesRequest_Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *ReplaceFilesRequest) GetZippedContents() []byte {
	if x != nil {
		return x.ZippedContents
	}
	return nil
}

func (x *ReplaceFilesRequest) GetChangeDetails() *ChangeDetails {
	if x != nil {
		return x.ChangeDetails
	}
	return nil
}

type ErrDetailValidationFailure struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Errors        []*FileError           `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrDetailValidationFailure) Reset() {
	*x = ErrDetailValidationFailure{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrDetailValidationFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrDetailValidationFailure) ProtoMessage() {}

func (x *ErrDetailValidationFailure) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrDetailValidationFailure.ProtoReflect.Descriptor instead.
func (*ErrDetailValidationFailure) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{13}
}

func (x *ErrDetailValidationFailure) GetErrors() []*FileError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ErrDetailNoUsableFiles struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IgnoredFiles  []string               `protobuf:"bytes,1,rep,name=ignored_files,json=ignoredFiles,proto3" json:"ignored_files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrDetailNoUsableFiles) Reset() {
	*x = ErrDetailNoUsableFiles{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrDetailNoUsableFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrDetailNoUsableFiles) ProtoMessage() {}

func (x *ErrDetailNoUsableFiles) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrDetailNoUsableFiles.ProtoReflect.Descriptor instead.
func (*ErrDetailNoUsableFiles) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{14}
}

func (x *ErrDetailNoUsableFiles) GetIgnoredFiles() []string {
	if x != nil {
		return x.IgnoredFiles
	}
	return nil
}

type ReplaceFilesResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	NewStoreVersion int64                  `protobuf:"varint,1,opt,name=new_store_version,json=newStoreVersion,proto3" json:"new_store_version,omitempty"`
	IgnoredFiles    []string               `protobuf:"bytes,2,rep,name=ignored_files,json=ignoredFiles,proto3" json:"ignored_files,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ReplaceFilesResponse) Reset() {
	*x = ReplaceFilesResponse{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceFilesResponse) ProtoMessage() {}

func (x *ReplaceFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceFilesResponse.ProtoReflect.Descriptor instead.
func (*ReplaceFilesResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{15}
}

func (x *ReplaceFilesResponse) GetNewStoreVersion() int64 {
	if x != nil {
		return x.NewStoreVersion
	}
	return 0
}

func (x *ReplaceFilesResponse) GetIgnoredFiles() []string {
	if x != nil {
		return x.IgnoredFiles
	}
	return nil
}

type StringMatch_InList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []string               `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringMatch_InList) Reset() {
	*x = StringMatch_InList{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringMatch_InList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringMatch_InList) ProtoMessage() {}

func (x *StringMatch_InList) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringMatch_InList.ProtoReflect.Descriptor instead.
func (*StringMatch_InList) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{0, 0}
}

func (x *StringMatch_InList) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type ChangeDetails_Git struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Repo          string                 `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Ref           string                 `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	Hash          string                 `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Committer     string                 `protobuf:"bytes,5,opt,name=committer,proto3" json:"committer,omitempty"`
	CommitDate    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=commit_date,json=commitDate,proto3" json:"commit_date,omitempty"`
	Author        string                 `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	AuthorDate    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=author_date,json=authorDate,proto3" json:"author_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeDetails_Git) Reset() {
	*x = ChangeDetails_Git{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeDetails_Git) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeDetails_Git) ProtoMessage() {}

func (x *ChangeDetails_Git) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeDetails_Git.ProtoReflect.Descriptor instead.
func (*ChangeDetails_Git) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ChangeDetails_Git) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *ChangeDetails_Git) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *ChangeDetails_Git) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ChangeDetails_Git) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ChangeDetails_Git) GetCommitter() string {
	if x != nil {
		return x.Committer
	}
	return ""
}

func (x *ChangeDetails_Git) GetCommitDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CommitDate
	}
	return nil
}

func (x *ChangeDetails_Git) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ChangeDetails_Git) GetAuthorDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AuthorDate
	}
	return nil
}

type ChangeDetails_Internal struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Source        string                     `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Metadata      map[string]*structpb.Value `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeDetails_Internal) Reset() {
	*x = ChangeDetails_Internal{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeDetails_Internal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeDetails_Internal) ProtoMessage() {}

func (x *ChangeDetails_Internal) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeDetails_Internal.ProtoReflect.Descriptor instead.
func (*ChangeDetails_Internal) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{7, 1}
}

func (x *ChangeDetails_Internal) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ChangeDetails_Internal) GetMetadata() map[string]*structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ChangeDetails_Uploader struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Name          string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Metadata      map[string]*structpb.Value `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeDetails_Uploader) Reset() {
	*x = ChangeDetails_Uploader{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeDetails_Uploader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeDetails_Uploader) ProtoMessage() {}

func (x *ChangeDetails_Uploader) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeDetails_Uploader.ProtoReflect.Descriptor instead.
func (*ChangeDetails_Uploader) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{7, 2}
}

func (x *ChangeDetails_Uploader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChangeDetails_Uploader) GetMetadata() map[string]*structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ModifyFilesRequest_Condition struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	StoreVersionMustEqual int64                  `protobuf:"varint,1,opt,name=store_version_must_equal,json=storeVersionMustEqual,proto3" json:"store_version_must_equal,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ModifyFilesRequest_Condition) Reset() {
	*x = ModifyFilesRequest_Condition{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyFilesRequest_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyFilesRequest_Condition) ProtoMessage() {}

func (x *ModifyFilesRequest_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyFilesRequest_Condition.ProtoReflect.Descriptor instead.
func (*ModifyFilesRequest_Condition) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ModifyFilesRequest_Condition) GetStoreVersionMustEqual() int64 {
	if x != nil {
		return x.StoreVersionMustEqual
	}
	return 0
}

type ReplaceFilesRequest_Condition struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	StoreVersionMustEqual int64                  `protobuf:"varint,1,opt,name=store_version_must_equal,json=storeVersionMustEqual,proto3" json:"store_version_must_equal,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ReplaceFilesRequest_Condition) Reset() {
	*x = ReplaceFilesRequest_Condition{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaceFilesRequest_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceFilesRequest_Condition) ProtoMessage() {}

func (x *ReplaceFilesRequest_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceFilesRequest_Condition.ProtoReflect.Descriptor instead.
func (*ReplaceFilesRequest_Condition) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ReplaceFilesRequest_Condition) GetStoreVersionMustEqual() int64 {
	if x != nil {
		return x.StoreVersionMustEqual
	}
	return 0
}

var File_cerbos_cloud_store_v1_store_proto protoreflect.FileDescriptor

var file_cerbos_cloud_store_v1_store_proto_rawDesc = string([]byte{
	0x0a, 0x21, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x15, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x14, 0x0a,
	0x04, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6c,
	0x69, 0x6b, 0x65, 0x12, 0x3b, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x02, 0x69, 0x6e,
	0x1a, 0x30, 0x0a, 0x06, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0x92,
	0x01, 0x08, 0x10, 0x0a, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x42, 0x0e, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x05, 0xba, 0x48, 0x02,
	0x08, 0x01, 0x22, 0x52, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x3b, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0x98, 0x01, 0x0c, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x3e, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x4e, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x98, 0x01, 0x0c, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x12, 0xba, 0x48, 0x0f, 0x92, 0x01, 0x0c, 0x08, 0x01, 0x10, 0x0a, 0x18, 0x01,
	0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x50, 0x0a,
	0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0c, 0xba, 0x48, 0x09, 0x7a, 0x07, 0x10, 0x01,
	0x18, 0x80, 0x80, 0xc0, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x6a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xbf, 0x07, 0x0a, 0x0d,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x49, 0x0a, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x03, 0x67, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x47, 0x69,
	0x74, 0x48, 0x00, 0x52, 0x03, 0x67, 0x69, 0x74, 0x12, 0x4b, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x89, 0x02, 0x0a, 0x03, 0x47, 0x69, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x72, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12,
	0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x44, 0x61, 0x74,
	0x65, 0x1a, 0xd0, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x53, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0xcc, 0x01, 0x0a, 0x08, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x53,
	0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x72, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x12, 0x41, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x6f,
	0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x61,
	0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x02, 0x6f, 0x70, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08,
	0x01, 0x22, 0x9e, 0x03, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0x98, 0x01, 0x0c, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x56, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x92, 0x01, 0x04,
	0x08, 0x01, 0x10, 0x19, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x50, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x01,
	0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88,
	0x01, 0x01, 0x1a, 0x4d, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x18, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x15, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x73, 0x74, 0x45, 0x71, 0x75, 0x61,
	0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0xb5, 0x02, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x05, 0x63, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xbb, 0x01, 0x0a,
	0x05, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a,
	0x17, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x41,
	0x55, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x53, 0x10,
	0x03, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x04,
	0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54,
	0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x05, 0x22, 0x41, 0x0a, 0x13, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x65,
	0x77, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x03,
	0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x98, 0x01,
	0x0c, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0f, 0x7a, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0c, 0xba, 0x48,
	0x09, 0x7a, 0x07, 0x10, 0x16, 0x18, 0x80, 0x80, 0xc0, 0x07, 0x52, 0x0e, 0x7a, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x0e, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x4d, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x18, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f,
	0x65, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x22, 0x02, 0x28, 0x00, 0x52, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x75, 0x73, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x56, 0x0a, 0x1a,
	0x45, 0x72, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0x3d, 0x0a, 0x16, 0x45, 0x72, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x4e, 0x6f, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e,
	0x65, 0x77, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x32, 0xc4, 0x03, 0x0a,
	0x12, 0x43, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x27, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x60, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x66, 0x0a, 0x0b, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x69, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x1a, 0x14, 0xfa,
	0xd2, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e,
	0x54, 0x41, 0x4c, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x62, 0x2f, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_cerbos_cloud_store_v1_store_proto_rawDescOnce sync.Once
	file_cerbos_cloud_store_v1_store_proto_rawDescData []byte
)

func file_cerbos_cloud_store_v1_store_proto_rawDescGZIP() []byte {
	file_cerbos_cloud_store_v1_store_proto_rawDescOnce.Do(func() {
		file_cerbos_cloud_store_v1_store_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cerbos_cloud_store_v1_store_proto_rawDesc), len(file_cerbos_cloud_store_v1_store_proto_rawDesc)))
	})
	return file_cerbos_cloud_store_v1_store_proto_rawDescData
}

var file_cerbos_cloud_store_v1_store_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cerbos_cloud_store_v1_store_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_cerbos_cloud_store_v1_store_proto_goTypes = []any{
	(FileError_Cause)(0),                  // 0: cerbos.cloud.store.v1.FileError.Cause
	(*StringMatch)(nil),                   // 1: cerbos.cloud.store.v1.StringMatch
	(*FileFilter)(nil),                    // 2: cerbos.cloud.store.v1.FileFilter
	(*ListFilesRequest)(nil),              // 3: cerbos.cloud.store.v1.ListFilesRequest
	(*ListFilesResponse)(nil),             // 4: cerbos.cloud.store.v1.ListFilesResponse
	(*GetFilesRequest)(nil),               // 5: cerbos.cloud.store.v1.GetFilesRequest
	(*File)(nil),                          // 6: cerbos.cloud.store.v1.File
	(*GetFilesResponse)(nil),              // 7: cerbos.cloud.store.v1.GetFilesResponse
	(*ChangeDetails)(nil),                 // 8: cerbos.cloud.store.v1.ChangeDetails
	(*FileOp)(nil),                        // 9: cerbos.cloud.store.v1.FileOp
	(*ModifyFilesRequest)(nil),            // 10: cerbos.cloud.store.v1.ModifyFilesRequest
	(*FileError)(nil),                     // 11: cerbos.cloud.store.v1.FileError
	(*ModifyFilesResponse)(nil),           // 12: cerbos.cloud.store.v1.ModifyFilesResponse
	(*ReplaceFilesRequest)(nil),           // 13: cerbos.cloud.store.v1.ReplaceFilesRequest
	(*ErrDetailValidationFailure)(nil),    // 14: cerbos.cloud.store.v1.ErrDetailValidationFailure
	(*ErrDetailNoUsableFiles)(nil),        // 15: cerbos.cloud.store.v1.ErrDetailNoUsableFiles
	(*ReplaceFilesResponse)(nil),          // 16: cerbos.cloud.store.v1.ReplaceFilesResponse
	(*StringMatch_InList)(nil),            // 17: cerbos.cloud.store.v1.StringMatch.InList
	(*ChangeDetails_Git)(nil),             // 18: cerbos.cloud.store.v1.ChangeDetails.Git
	(*ChangeDetails_Internal)(nil),        // 19: cerbos.cloud.store.v1.ChangeDetails.Internal
	(*ChangeDetails_Uploader)(nil),        // 20: cerbos.cloud.store.v1.ChangeDetails.Uploader
	nil,                                   // 21: cerbos.cloud.store.v1.ChangeDetails.Internal.MetadataEntry
	nil,                                   // 22: cerbos.cloud.store.v1.ChangeDetails.Uploader.MetadataEntry
	(*ModifyFilesRequest_Condition)(nil),  // 23: cerbos.cloud.store.v1.ModifyFilesRequest.Condition
	(*ReplaceFilesRequest_Condition)(nil), // 24: cerbos.cloud.store.v1.ReplaceFilesRequest.Condition
	(*timestamppb.Timestamp)(nil),         // 25: google.protobuf.Timestamp
	(*structpb.Value)(nil),                // 26: google.protobuf.Value
}
var file_cerbos_cloud_store_v1_store_proto_depIdxs = []int32{
	17, // 0: cerbos.cloud.store.v1.StringMatch.in:type_name -> cerbos.cloud.store.v1.StringMatch.InList
	1,  // 1: cerbos.cloud.store.v1.FileFilter.path:type_name -> cerbos.cloud.store.v1.StringMatch
	2,  // 2: cerbos.cloud.store.v1.ListFilesRequest.filter:type_name -> cerbos.cloud.store.v1.FileFilter
	6,  // 3: cerbos.cloud.store.v1.GetFilesResponse.files:type_name -> cerbos.cloud.store.v1.File
	20, // 4: cerbos.cloud.store.v1.ChangeDetails.uploader:type_name -> cerbos.cloud.store.v1.ChangeDetails.Uploader
	18, // 5: cerbos.cloud.store.v1.ChangeDetails.git:type_name -> cerbos.cloud.store.v1.ChangeDetails.Git
	19, // 6: cerbos.cloud.store.v1.ChangeDetails.internal:type_name -> cerbos.cloud.store.v1.ChangeDetails.Internal
	6,  // 7: cerbos.cloud.store.v1.FileOp.add_or_update:type_name -> cerbos.cloud.store.v1.File
	23, // 8: cerbos.cloud.store.v1.ModifyFilesRequest.condition:type_name -> cerbos.cloud.store.v1.ModifyFilesRequest.Condition
	9,  // 9: cerbos.cloud.store.v1.ModifyFilesRequest.operations:type_name -> cerbos.cloud.store.v1.FileOp
	8,  // 10: cerbos.cloud.store.v1.ModifyFilesRequest.change_details:type_name -> cerbos.cloud.store.v1.ChangeDetails
	0,  // 11: cerbos.cloud.store.v1.FileError.cause:type_name -> cerbos.cloud.store.v1.FileError.Cause
	24, // 12: cerbos.cloud.store.v1.ReplaceFilesRequest.condition:type_name -> cerbos.cloud.store.v1.ReplaceFilesRequest.Condition
	8,  // 13: cerbos.cloud.store.v1.ReplaceFilesRequest.change_details:type_name -> cerbos.cloud.store.v1.ChangeDetails
	11, // 14: cerbos.cloud.store.v1.ErrDetailValidationFailure.errors:type_name -> cerbos.cloud.store.v1.FileError
	25, // 15: cerbos.cloud.store.v1.ChangeDetails.Git.commit_date:type_name -> google.protobuf.Timestamp
	25, // 16: cerbos.cloud.store.v1.ChangeDetails.Git.author_date:type_name -> google.protobuf.Timestamp
	21, // 17: cerbos.cloud.store.v1.ChangeDetails.Internal.metadata:type_name -> cerbos.cloud.store.v1.ChangeDetails.Internal.MetadataEntry
	22, // 18: cerbos.cloud.store.v1.ChangeDetails.Uploader.metadata:type_name -> cerbos.cloud.store.v1.ChangeDetails.Uploader.MetadataEntry
	26, // 19: cerbos.cloud.store.v1.ChangeDetails.Internal.MetadataEntry.value:type_name -> google.protobuf.Value
	26, // 20: cerbos.cloud.store.v1.ChangeDetails.Uploader.MetadataEntry.value:type_name -> google.protobuf.Value
	3,  // 21: cerbos.cloud.store.v1.CerbosStoreService.ListFiles:input_type -> cerbos.cloud.store.v1.ListFilesRequest
	5,  // 22: cerbos.cloud.store.v1.CerbosStoreService.GetFiles:input_type -> cerbos.cloud.store.v1.GetFilesRequest
	10, // 23: cerbos.cloud.store.v1.CerbosStoreService.ModifyFiles:input_type -> cerbos.cloud.store.v1.ModifyFilesRequest
	13, // 24: cerbos.cloud.store.v1.CerbosStoreService.ReplaceFiles:input_type -> cerbos.cloud.store.v1.ReplaceFilesRequest
	4,  // 25: cerbos.cloud.store.v1.CerbosStoreService.ListFiles:output_type -> cerbos.cloud.store.v1.ListFilesResponse
	7,  // 26: cerbos.cloud.store.v1.CerbosStoreService.GetFiles:output_type -> cerbos.cloud.store.v1.GetFilesResponse
	12, // 27: cerbos.cloud.store.v1.CerbosStoreService.ModifyFiles:output_type -> cerbos.cloud.store.v1.ModifyFilesResponse
	16, // 28: cerbos.cloud.store.v1.CerbosStoreService.ReplaceFiles:output_type -> cerbos.cloud.store.v1.ReplaceFilesResponse
	25, // [25:29] is the sub-list for method output_type
	21, // [21:25] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_cerbos_cloud_store_v1_store_proto_init() }
func file_cerbos_cloud_store_v1_store_proto_init() {
	if File_cerbos_cloud_store_v1_store_proto != nil {
		return
	}
	file_cerbos_cloud_store_v1_store_proto_msgTypes[0].OneofWrappers = []any{
		(*StringMatch_Equals)(nil),
		(*StringMatch_Like)(nil),
		(*StringMatch_In)(nil),
	}
	file_cerbos_cloud_store_v1_store_proto_msgTypes[1].OneofWrappers = []any{}
	file_cerbos_cloud_store_v1_store_proto_msgTypes[2].OneofWrappers = []any{}
	file_cerbos_cloud_store_v1_store_proto_msgTypes[7].OneofWrappers = []any{
		(*ChangeDetails_Git_)(nil),
		(*ChangeDetails_Internal_)(nil),
	}
	file_cerbos_cloud_store_v1_store_proto_msgTypes[8].OneofWrappers = []any{
		(*FileOp_AddOrUpdate)(nil),
		(*FileOp_Delete)(nil),
	}
	file_cerbos_cloud_store_v1_store_proto_msgTypes[9].OneofWrappers = []any{}
	file_cerbos_cloud_store_v1_store_proto_msgTypes[12].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cerbos_cloud_store_v1_store_proto_rawDesc), len(file_cerbos_cloud_store_v1_store_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cerbos_cloud_store_v1_store_proto_goTypes,
		DependencyIndexes: file_cerbos_cloud_store_v1_store_proto_depIdxs,
		EnumInfos:         file_cerbos_cloud_store_v1_store_proto_enumTypes,
		MessageInfos:      file_cerbos_cloud_store_v1_store_proto_msgTypes,
	}.Build()
	File_cerbos_cloud_store_v1_store_proto = out.File
	file_cerbos_cloud_store_v1_store_proto_goTypes = nil
	file_cerbos_cloud_store_v1_store_proto_depIdxs = nil
}
