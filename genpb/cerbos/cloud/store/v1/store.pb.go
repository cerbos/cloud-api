// Copyright 2021-2024 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2-devel
// 	protoc        (unknown)
// source: cerbos/cloud/store/v1/store.proto

package storev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/cerbos/cerbos/api/genpb/cerbos/policy/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StringMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Match:
	//
	//	*StringMatch_Equals
	//	*StringMatch_Like
	//	*StringMatch_In
	Match isStringMatch_Match `protobuf_oneof:"match"`
}

func (x *StringMatch) Reset() {
	*x = StringMatch{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringMatch) ProtoMessage() {}

func (x *StringMatch) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringMatch.ProtoReflect.Descriptor instead.
func (*StringMatch) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{0}
}

func (m *StringMatch) GetMatch() isStringMatch_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (x *StringMatch) GetEquals() string {
	if x, ok := x.GetMatch().(*StringMatch_Equals); ok {
		return x.Equals
	}
	return ""
}

func (x *StringMatch) GetLike() string {
	if x, ok := x.GetMatch().(*StringMatch_Like); ok {
		return x.Like
	}
	return ""
}

func (x *StringMatch) GetIn() *StringMatch_InList {
	if x, ok := x.GetMatch().(*StringMatch_In); ok {
		return x.In
	}
	return nil
}

type isStringMatch_Match interface {
	isStringMatch_Match()
}

type StringMatch_Equals struct {
	Equals string `protobuf:"bytes,1,opt,name=equals,proto3,oneof"`
}

type StringMatch_Like struct {
	Like string `protobuf:"bytes,2,opt,name=like,proto3,oneof"`
}

type StringMatch_In struct {
	In *StringMatch_InList `protobuf:"bytes,3,opt,name=in,proto3,oneof"`
}

func (*StringMatch_Equals) isStringMatch_Match() {}

func (*StringMatch_Like) isStringMatch_Match() {}

func (*StringMatch_In) isStringMatch_Match() {}

type PolicyFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kinds   []v1.Kind    `protobuf:"varint,1,rep,packed,name=kinds,proto3,enum=cerbos.policy.v1.Kind" json:"kinds,omitempty"`
	Name    *StringMatch `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version *StringMatch `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Scope   *StringMatch `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (x *PolicyFilter) Reset() {
	*x = PolicyFilter{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyFilter) ProtoMessage() {}

func (x *PolicyFilter) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyFilter.ProtoReflect.Descriptor instead.
func (*PolicyFilter) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{1}
}

func (x *PolicyFilter) GetKinds() []v1.Kind {
	if x != nil {
		return x.Kinds
	}
	return nil
}

func (x *PolicyFilter) GetName() *StringMatch {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *PolicyFilter) GetVersion() *StringMatch {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *PolicyFilter) GetScope() *StringMatch {
	if x != nil {
		return x.Scope
	}
	return nil
}

type ListPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreId string        `protobuf:"bytes,1,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	Filter  *PolicyFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListPoliciesRequest) Reset() {
	*x = ListPoliciesRequest{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoliciesRequest) ProtoMessage() {}

func (x *ListPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{2}
}

func (x *ListPoliciesRequest) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *ListPoliciesRequest) GetFilter() *PolicyFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreVersion int64                          `protobuf:"varint,1,opt,name=store_version,json=storeVersion,proto3" json:"store_version,omitempty"`
	Policies     []*ListPoliciesResponse_Policy `protobuf:"bytes,2,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *ListPoliciesResponse) Reset() {
	*x = ListPoliciesResponse{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoliciesResponse) ProtoMessage() {}

func (x *ListPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{3}
}

func (x *ListPoliciesResponse) GetStoreVersion() int64 {
	if x != nil {
		return x.StoreVersion
	}
	return 0
}

func (x *ListPoliciesResponse) GetPolicies() []*ListPoliciesResponse_Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type GetPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreId    string   `protobuf:"bytes,1,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	PolicyKeys []string `protobuf:"bytes,2,rep,name=policy_keys,json=policyKeys,proto3" json:"policy_keys,omitempty"`
}

func (x *GetPoliciesRequest) Reset() {
	*x = GetPoliciesRequest{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoliciesRequest) ProtoMessage() {}

func (x *GetPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoliciesRequest.ProtoReflect.Descriptor instead.
func (*GetPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{4}
}

func (x *GetPoliciesRequest) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *GetPoliciesRequest) GetPolicyKeys() []string {
	if x != nil {
		return x.PolicyKeys
	}
	return nil
}

type GetPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreVersion int64                 `protobuf:"varint,1,opt,name=store_version,json=storeVersion,proto3" json:"store_version,omitempty"`
	Policies     map[string]*v1.Policy `protobuf:"bytes,2,rep,name=policies,proto3" json:"policies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetPoliciesResponse) Reset() {
	*x = GetPoliciesResponse{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoliciesResponse) ProtoMessage() {}

func (x *GetPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoliciesResponse.ProtoReflect.Descriptor instead.
func (*GetPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{5}
}

func (x *GetPoliciesResponse) GetStoreVersion() int64 {
	if x != nil {
		return x.StoreVersion
	}
	return 0
}

func (x *GetPoliciesResponse) GetPolicies() map[string]*v1.Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type PolicyOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Op:
	//
	//	*PolicyOp_AddOrUpdate
	//	*PolicyOp_Delete
	Op isPolicyOp_Op `protobuf_oneof:"op"`
}

func (x *PolicyOp) Reset() {
	*x = PolicyOp{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyOp) ProtoMessage() {}

func (x *PolicyOp) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyOp.ProtoReflect.Descriptor instead.
func (*PolicyOp) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{6}
}

func (m *PolicyOp) GetOp() isPolicyOp_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (x *PolicyOp) GetAddOrUpdate() *v1.Policy {
	if x, ok := x.GetOp().(*PolicyOp_AddOrUpdate); ok {
		return x.AddOrUpdate
	}
	return nil
}

func (x *PolicyOp) GetDelete() string {
	if x, ok := x.GetOp().(*PolicyOp_Delete); ok {
		return x.Delete
	}
	return ""
}

type isPolicyOp_Op interface {
	isPolicyOp_Op()
}

type PolicyOp_AddOrUpdate struct {
	AddOrUpdate *v1.Policy `protobuf:"bytes,1,opt,name=add_or_update,json=addOrUpdate,proto3,oneof"`
}

type PolicyOp_Delete struct {
	Delete string `protobuf:"bytes,2,opt,name=delete,proto3,oneof"`
}

func (*PolicyOp_AddOrUpdate) isPolicyOp_Op() {}

func (*PolicyOp_Delete) isPolicyOp_Op() {}

type ModifyPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreId    string                           `protobuf:"bytes,1,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	Condition  *ModifyPoliciesRequest_Condition `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
	Operations []*PolicyOp                      `protobuf:"bytes,3,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *ModifyPoliciesRequest) Reset() {
	*x = ModifyPoliciesRequest{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyPoliciesRequest) ProtoMessage() {}

func (x *ModifyPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ModifyPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{7}
}

func (x *ModifyPoliciesRequest) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *ModifyPoliciesRequest) GetCondition() *ModifyPoliciesRequest_Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *ModifyPoliciesRequest) GetOperations() []*PolicyOp {
	if x != nil {
		return x.Operations
	}
	return nil
}

type ModifyPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewStoreVersion int64 `protobuf:"varint,1,opt,name=new_store_version,json=newStoreVersion,proto3" json:"new_store_version,omitempty"`
}

func (x *ModifyPoliciesResponse) Reset() {
	*x = ModifyPoliciesResponse{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyPoliciesResponse) ProtoMessage() {}

func (x *ModifyPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ModifyPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{8}
}

func (x *ModifyPoliciesResponse) GetNewStoreVersion() int64 {
	if x != nil {
		return x.NewStoreVersion
	}
	return 0
}

type StringMatch_InList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *StringMatch_InList) Reset() {
	*x = StringMatch_InList{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringMatch_InList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringMatch_InList) ProtoMessage() {}

func (x *StringMatch_InList) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringMatch_InList.ProtoReflect.Descriptor instead.
func (*StringMatch_InList) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{0, 0}
}

func (x *StringMatch_InList) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type ListPoliciesResponse_Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Kind      v1.Kind                `protobuf:"varint,2,opt,name=kind,proto3,enum=cerbos.policy.v1.Kind" json:"kind,omitempty"`
	Name      string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Version   string                 `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Scope     string                 `protobuf:"bytes,5,opt,name=scope,proto3" json:"scope,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *ListPoliciesResponse_Policy) Reset() {
	*x = ListPoliciesResponse_Policy{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPoliciesResponse_Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoliciesResponse_Policy) ProtoMessage() {}

func (x *ListPoliciesResponse_Policy) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoliciesResponse_Policy.ProtoReflect.Descriptor instead.
func (*ListPoliciesResponse_Policy) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ListPoliciesResponse_Policy) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ListPoliciesResponse_Policy) GetKind() v1.Kind {
	if x != nil {
		return x.Kind
	}
	return v1.Kind(0)
}

func (x *ListPoliciesResponse_Policy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListPoliciesResponse_Policy) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ListPoliciesResponse_Policy) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ListPoliciesResponse_Policy) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type ModifyPoliciesRequest_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreVersionMustEqual int64 `protobuf:"varint,1,opt,name=store_version_must_equal,json=storeVersionMustEqual,proto3" json:"store_version_must_equal,omitempty"`
}

func (x *ModifyPoliciesRequest_Condition) Reset() {
	*x = ModifyPoliciesRequest_Condition{}
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyPoliciesRequest_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyPoliciesRequest_Condition) ProtoMessage() {}

func (x *ModifyPoliciesRequest_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_store_v1_store_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyPoliciesRequest_Condition.ProtoReflect.Descriptor instead.
func (*ModifyPoliciesRequest_Condition) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_store_v1_store_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ModifyPoliciesRequest_Condition) GetStoreVersionMustEqual() int64 {
	if x != nil {
		return x.StoreVersionMustEqual
	}
	return 0
}

var File_cerbos_cloud_store_v1_store_proto protoreflect.FileDescriptor

var file_cerbos_cloud_store_v1_store_proto_rawDesc = []byte{
	0x0a, 0x21, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x15, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12,
	0x14, 0x0a, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6c, 0x69, 0x6b, 0x65, 0x12, 0x3b, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x6e, 0x1a, 0x30, 0x0a, 0x06, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xba, 0x48,
	0x0b, 0x92, 0x01, 0x08, 0x10, 0x32, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x42, 0x0e, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x05, 0xba,
	0x48, 0x02, 0x08, 0x01, 0x22, 0x92, 0x02, 0x0a, 0x0c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x05, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x15, 0xe0, 0x41,
	0x01, 0xba, 0x48, 0x0f, 0x92, 0x01, 0x0c, 0x18, 0x01, 0x22, 0x08, 0x82, 0x01, 0x05, 0x10, 0x01,
	0x22, 0x01, 0x00, 0x52, 0x05, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x7c, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x98, 0x01, 0x0c, 0x52, 0x07, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xd3, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x1a, 0xc5, 0x01, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x6a, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x98, 0x01, 0x0c, 0x52,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xba,
	0x48, 0x0b, 0x92, 0x01, 0x08, 0x10, 0x32, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x55, 0x0a, 0x0d,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x71, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x70, 0x12,
	0x3e, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x48, 0x00, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x02, 0x6f, 0x70, 0x12,
	0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0xb1, 0x02, 0x0a, 0x15, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x98, 0x01, 0x0c, 0x52, 0x07, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x49, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4f, 0x70, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x4d, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x18, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x65,
	0x71, 0x75, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xba, 0x48, 0x04, 0x22,
	0x02, 0x28, 0x00, 0x52, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x75, 0x73, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x22, 0x44, 0x0a, 0x16, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x32, 0xf4, 0x02, 0x0a, 0x12, 0x43, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6c, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x69, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01,
	0x12, 0x6f, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x2c, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x1a, 0x14, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x45, 0x58, 0x50, 0x45, 0x52,
	0x49, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x62, 0x2f, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f,
	0x76, 0x31, 0x3b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_cerbos_cloud_store_v1_store_proto_rawDescOnce sync.Once
	file_cerbos_cloud_store_v1_store_proto_rawDescData = file_cerbos_cloud_store_v1_store_proto_rawDesc
)

func file_cerbos_cloud_store_v1_store_proto_rawDescGZIP() []byte {
	file_cerbos_cloud_store_v1_store_proto_rawDescOnce.Do(func() {
		file_cerbos_cloud_store_v1_store_proto_rawDescData = protoimpl.X.CompressGZIP(file_cerbos_cloud_store_v1_store_proto_rawDescData)
	})
	return file_cerbos_cloud_store_v1_store_proto_rawDescData
}

var file_cerbos_cloud_store_v1_store_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_cerbos_cloud_store_v1_store_proto_goTypes = []any{
	(*StringMatch)(nil),                     // 0: cerbos.cloud.store.v1.StringMatch
	(*PolicyFilter)(nil),                    // 1: cerbos.cloud.store.v1.PolicyFilter
	(*ListPoliciesRequest)(nil),             // 2: cerbos.cloud.store.v1.ListPoliciesRequest
	(*ListPoliciesResponse)(nil),            // 3: cerbos.cloud.store.v1.ListPoliciesResponse
	(*GetPoliciesRequest)(nil),              // 4: cerbos.cloud.store.v1.GetPoliciesRequest
	(*GetPoliciesResponse)(nil),             // 5: cerbos.cloud.store.v1.GetPoliciesResponse
	(*PolicyOp)(nil),                        // 6: cerbos.cloud.store.v1.PolicyOp
	(*ModifyPoliciesRequest)(nil),           // 7: cerbos.cloud.store.v1.ModifyPoliciesRequest
	(*ModifyPoliciesResponse)(nil),          // 8: cerbos.cloud.store.v1.ModifyPoliciesResponse
	(*StringMatch_InList)(nil),              // 9: cerbos.cloud.store.v1.StringMatch.InList
	(*ListPoliciesResponse_Policy)(nil),     // 10: cerbos.cloud.store.v1.ListPoliciesResponse.Policy
	nil,                                     // 11: cerbos.cloud.store.v1.GetPoliciesResponse.PoliciesEntry
	(*ModifyPoliciesRequest_Condition)(nil), // 12: cerbos.cloud.store.v1.ModifyPoliciesRequest.Condition
	(v1.Kind)(0),                            // 13: cerbos.policy.v1.Kind
	(*v1.Policy)(nil),                       // 14: cerbos.policy.v1.Policy
	(*timestamppb.Timestamp)(nil),           // 15: google.protobuf.Timestamp
}
var file_cerbos_cloud_store_v1_store_proto_depIdxs = []int32{
	9,  // 0: cerbos.cloud.store.v1.StringMatch.in:type_name -> cerbos.cloud.store.v1.StringMatch.InList
	13, // 1: cerbos.cloud.store.v1.PolicyFilter.kinds:type_name -> cerbos.policy.v1.Kind
	0,  // 2: cerbos.cloud.store.v1.PolicyFilter.name:type_name -> cerbos.cloud.store.v1.StringMatch
	0,  // 3: cerbos.cloud.store.v1.PolicyFilter.version:type_name -> cerbos.cloud.store.v1.StringMatch
	0,  // 4: cerbos.cloud.store.v1.PolicyFilter.scope:type_name -> cerbos.cloud.store.v1.StringMatch
	1,  // 5: cerbos.cloud.store.v1.ListPoliciesRequest.filter:type_name -> cerbos.cloud.store.v1.PolicyFilter
	10, // 6: cerbos.cloud.store.v1.ListPoliciesResponse.policies:type_name -> cerbos.cloud.store.v1.ListPoliciesResponse.Policy
	11, // 7: cerbos.cloud.store.v1.GetPoliciesResponse.policies:type_name -> cerbos.cloud.store.v1.GetPoliciesResponse.PoliciesEntry
	14, // 8: cerbos.cloud.store.v1.PolicyOp.add_or_update:type_name -> cerbos.policy.v1.Policy
	12, // 9: cerbos.cloud.store.v1.ModifyPoliciesRequest.condition:type_name -> cerbos.cloud.store.v1.ModifyPoliciesRequest.Condition
	6,  // 10: cerbos.cloud.store.v1.ModifyPoliciesRequest.operations:type_name -> cerbos.cloud.store.v1.PolicyOp
	13, // 11: cerbos.cloud.store.v1.ListPoliciesResponse.Policy.kind:type_name -> cerbos.policy.v1.Kind
	15, // 12: cerbos.cloud.store.v1.ListPoliciesResponse.Policy.created_at:type_name -> google.protobuf.Timestamp
	14, // 13: cerbos.cloud.store.v1.GetPoliciesResponse.PoliciesEntry.value:type_name -> cerbos.policy.v1.Policy
	2,  // 14: cerbos.cloud.store.v1.CerbosStoreService.ListPolicies:input_type -> cerbos.cloud.store.v1.ListPoliciesRequest
	4,  // 15: cerbos.cloud.store.v1.CerbosStoreService.GetPolicies:input_type -> cerbos.cloud.store.v1.GetPoliciesRequest
	7,  // 16: cerbos.cloud.store.v1.CerbosStoreService.ModifyPolicies:input_type -> cerbos.cloud.store.v1.ModifyPoliciesRequest
	3,  // 17: cerbos.cloud.store.v1.CerbosStoreService.ListPolicies:output_type -> cerbos.cloud.store.v1.ListPoliciesResponse
	5,  // 18: cerbos.cloud.store.v1.CerbosStoreService.GetPolicies:output_type -> cerbos.cloud.store.v1.GetPoliciesResponse
	8,  // 19: cerbos.cloud.store.v1.CerbosStoreService.ModifyPolicies:output_type -> cerbos.cloud.store.v1.ModifyPoliciesResponse
	17, // [17:20] is the sub-list for method output_type
	14, // [14:17] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_cerbos_cloud_store_v1_store_proto_init() }
func file_cerbos_cloud_store_v1_store_proto_init() {
	if File_cerbos_cloud_store_v1_store_proto != nil {
		return
	}
	file_cerbos_cloud_store_v1_store_proto_msgTypes[0].OneofWrappers = []any{
		(*StringMatch_Equals)(nil),
		(*StringMatch_Like)(nil),
		(*StringMatch_In)(nil),
	}
	file_cerbos_cloud_store_v1_store_proto_msgTypes[6].OneofWrappers = []any{
		(*PolicyOp_AddOrUpdate)(nil),
		(*PolicyOp_Delete)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cerbos_cloud_store_v1_store_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cerbos_cloud_store_v1_store_proto_goTypes,
		DependencyIndexes: file_cerbos_cloud_store_v1_store_proto_depIdxs,
		MessageInfos:      file_cerbos_cloud_store_v1_store_proto_msgTypes,
	}.Build()
	File_cerbos_cloud_store_v1_store_proto = out.File
	file_cerbos_cloud_store_v1_store_proto_rawDesc = nil
	file_cerbos_cloud_store_v1_store_proto_goTypes = nil
	file_cerbos_cloud_store_v1_store_proto_depIdxs = nil
}
