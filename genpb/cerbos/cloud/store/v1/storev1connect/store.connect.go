// Copyright 2021-2025 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cerbos/cloud/store/v1/store.proto

package storev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/cerbos/cloud-api/genpb/cerbos/cloud/store/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CerbosStoreServiceName is the fully-qualified name of the CerbosStoreService service.
	CerbosStoreServiceName = "cerbos.cloud.store.v1.CerbosStoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CerbosStoreServiceListFilesProcedure is the fully-qualified name of the CerbosStoreService's
	// ListFiles RPC.
	CerbosStoreServiceListFilesProcedure = "/cerbos.cloud.store.v1.CerbosStoreService/ListFiles"
	// CerbosStoreServiceGetFilesProcedure is the fully-qualified name of the CerbosStoreService's
	// GetFiles RPC.
	CerbosStoreServiceGetFilesProcedure = "/cerbos.cloud.store.v1.CerbosStoreService/GetFiles"
	// CerbosStoreServiceModifyFilesProcedure is the fully-qualified name of the CerbosStoreService's
	// ModifyFiles RPC.
	CerbosStoreServiceModifyFilesProcedure = "/cerbos.cloud.store.v1.CerbosStoreService/ModifyFiles"
)

// CerbosStoreServiceClient is a client for the cerbos.cloud.store.v1.CerbosStoreService service.
type CerbosStoreServiceClient interface {
	ListFiles(context.Context, *connect.Request[v1.ListFilesRequest]) (*connect.Response[v1.ListFilesResponse], error)
	GetFiles(context.Context, *connect.Request[v1.GetFilesRequest]) (*connect.Response[v1.GetFilesResponse], error)
	ModifyFiles(context.Context, *connect.Request[v1.ModifyFilesRequest]) (*connect.Response[v1.ModifyFilesResponse], error)
}

// NewCerbosStoreServiceClient constructs a client for the cerbos.cloud.store.v1.CerbosStoreService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCerbosStoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CerbosStoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	cerbosStoreServiceMethods := v1.File_cerbos_cloud_store_v1_store_proto.Services().ByName("CerbosStoreService").Methods()
	return &cerbosStoreServiceClient{
		listFiles: connect.NewClient[v1.ListFilesRequest, v1.ListFilesResponse](
			httpClient,
			baseURL+CerbosStoreServiceListFilesProcedure,
			connect.WithSchema(cerbosStoreServiceMethods.ByName("ListFiles")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getFiles: connect.NewClient[v1.GetFilesRequest, v1.GetFilesResponse](
			httpClient,
			baseURL+CerbosStoreServiceGetFilesProcedure,
			connect.WithSchema(cerbosStoreServiceMethods.ByName("GetFiles")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		modifyFiles: connect.NewClient[v1.ModifyFilesRequest, v1.ModifyFilesResponse](
			httpClient,
			baseURL+CerbosStoreServiceModifyFilesProcedure,
			connect.WithSchema(cerbosStoreServiceMethods.ByName("ModifyFiles")),
			connect.WithClientOptions(opts...),
		),
	}
}

// cerbosStoreServiceClient implements CerbosStoreServiceClient.
type cerbosStoreServiceClient struct {
	listFiles   *connect.Client[v1.ListFilesRequest, v1.ListFilesResponse]
	getFiles    *connect.Client[v1.GetFilesRequest, v1.GetFilesResponse]
	modifyFiles *connect.Client[v1.ModifyFilesRequest, v1.ModifyFilesResponse]
}

// ListFiles calls cerbos.cloud.store.v1.CerbosStoreService.ListFiles.
func (c *cerbosStoreServiceClient) ListFiles(ctx context.Context, req *connect.Request[v1.ListFilesRequest]) (*connect.Response[v1.ListFilesResponse], error) {
	return c.listFiles.CallUnary(ctx, req)
}

// GetFiles calls cerbos.cloud.store.v1.CerbosStoreService.GetFiles.
func (c *cerbosStoreServiceClient) GetFiles(ctx context.Context, req *connect.Request[v1.GetFilesRequest]) (*connect.Response[v1.GetFilesResponse], error) {
	return c.getFiles.CallUnary(ctx, req)
}

// ModifyFiles calls cerbos.cloud.store.v1.CerbosStoreService.ModifyFiles.
func (c *cerbosStoreServiceClient) ModifyFiles(ctx context.Context, req *connect.Request[v1.ModifyFilesRequest]) (*connect.Response[v1.ModifyFilesResponse], error) {
	return c.modifyFiles.CallUnary(ctx, req)
}

// CerbosStoreServiceHandler is an implementation of the cerbos.cloud.store.v1.CerbosStoreService
// service.
type CerbosStoreServiceHandler interface {
	ListFiles(context.Context, *connect.Request[v1.ListFilesRequest]) (*connect.Response[v1.ListFilesResponse], error)
	GetFiles(context.Context, *connect.Request[v1.GetFilesRequest]) (*connect.Response[v1.GetFilesResponse], error)
	ModifyFiles(context.Context, *connect.Request[v1.ModifyFilesRequest]) (*connect.Response[v1.ModifyFilesResponse], error)
}

// NewCerbosStoreServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCerbosStoreServiceHandler(svc CerbosStoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cerbosStoreServiceMethods := v1.File_cerbos_cloud_store_v1_store_proto.Services().ByName("CerbosStoreService").Methods()
	cerbosStoreServiceListFilesHandler := connect.NewUnaryHandler(
		CerbosStoreServiceListFilesProcedure,
		svc.ListFiles,
		connect.WithSchema(cerbosStoreServiceMethods.ByName("ListFiles")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	cerbosStoreServiceGetFilesHandler := connect.NewUnaryHandler(
		CerbosStoreServiceGetFilesProcedure,
		svc.GetFiles,
		connect.WithSchema(cerbosStoreServiceMethods.ByName("GetFiles")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	cerbosStoreServiceModifyFilesHandler := connect.NewUnaryHandler(
		CerbosStoreServiceModifyFilesProcedure,
		svc.ModifyFiles,
		connect.WithSchema(cerbosStoreServiceMethods.ByName("ModifyFiles")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cerbos.cloud.store.v1.CerbosStoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CerbosStoreServiceListFilesProcedure:
			cerbosStoreServiceListFilesHandler.ServeHTTP(w, r)
		case CerbosStoreServiceGetFilesProcedure:
			cerbosStoreServiceGetFilesHandler.ServeHTTP(w, r)
		case CerbosStoreServiceModifyFilesProcedure:
			cerbosStoreServiceModifyFilesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCerbosStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCerbosStoreServiceHandler struct{}

func (UnimplementedCerbosStoreServiceHandler) ListFiles(context.Context, *connect.Request[v1.ListFilesRequest]) (*connect.Response[v1.ListFilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cerbos.cloud.store.v1.CerbosStoreService.ListFiles is not implemented"))
}

func (UnimplementedCerbosStoreServiceHandler) GetFiles(context.Context, *connect.Request[v1.GetFilesRequest]) (*connect.Response[v1.GetFilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cerbos.cloud.store.v1.CerbosStoreService.GetFiles is not implemented"))
}

func (UnimplementedCerbosStoreServiceHandler) ModifyFiles(context.Context, *connect.Request[v1.ModifyFilesRequest]) (*connect.Response[v1.ModifyFilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cerbos.cloud.store.v1.CerbosStoreService.ModifyFiles is not implemented"))
}
