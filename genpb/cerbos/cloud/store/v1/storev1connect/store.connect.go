// Copyright 2021-2024 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cerbos/cloud/store/v1/store.proto

package storev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/cerbos/cloud-api/genpb/cerbos/cloud/store/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CerbosStoreServiceName is the fully-qualified name of the CerbosStoreService service.
	CerbosStoreServiceName = "cerbos.cloud.store.v1.CerbosStoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CerbosStoreServiceListPoliciesProcedure is the fully-qualified name of the CerbosStoreService's
	// ListPolicies RPC.
	CerbosStoreServiceListPoliciesProcedure = "/cerbos.cloud.store.v1.CerbosStoreService/ListPolicies"
	// CerbosStoreServiceGetPoliciesProcedure is the fully-qualified name of the CerbosStoreService's
	// GetPolicies RPC.
	CerbosStoreServiceGetPoliciesProcedure = "/cerbos.cloud.store.v1.CerbosStoreService/GetPolicies"
	// CerbosStoreServiceModifyPoliciesProcedure is the fully-qualified name of the CerbosStoreService's
	// ModifyPolicies RPC.
	CerbosStoreServiceModifyPoliciesProcedure = "/cerbos.cloud.store.v1.CerbosStoreService/ModifyPolicies"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	cerbosStoreServiceServiceDescriptor              = v1.File_cerbos_cloud_store_v1_store_proto.Services().ByName("CerbosStoreService")
	cerbosStoreServiceListPoliciesMethodDescriptor   = cerbosStoreServiceServiceDescriptor.Methods().ByName("ListPolicies")
	cerbosStoreServiceGetPoliciesMethodDescriptor    = cerbosStoreServiceServiceDescriptor.Methods().ByName("GetPolicies")
	cerbosStoreServiceModifyPoliciesMethodDescriptor = cerbosStoreServiceServiceDescriptor.Methods().ByName("ModifyPolicies")
)

// CerbosStoreServiceClient is a client for the cerbos.cloud.store.v1.CerbosStoreService service.
type CerbosStoreServiceClient interface {
	ListPolicies(context.Context, *connect.Request[v1.ListPoliciesRequest]) (*connect.Response[v1.ListPoliciesResponse], error)
	GetPolicies(context.Context, *connect.Request[v1.GetPoliciesRequest]) (*connect.Response[v1.GetPoliciesResponse], error)
	ModifyPolicies(context.Context, *connect.Request[v1.ModifyPoliciesRequest]) (*connect.Response[v1.ModifyPoliciesResponse], error)
}

// NewCerbosStoreServiceClient constructs a client for the cerbos.cloud.store.v1.CerbosStoreService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCerbosStoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CerbosStoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &cerbosStoreServiceClient{
		listPolicies: connect.NewClient[v1.ListPoliciesRequest, v1.ListPoliciesResponse](
			httpClient,
			baseURL+CerbosStoreServiceListPoliciesProcedure,
			connect.WithSchema(cerbosStoreServiceListPoliciesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getPolicies: connect.NewClient[v1.GetPoliciesRequest, v1.GetPoliciesResponse](
			httpClient,
			baseURL+CerbosStoreServiceGetPoliciesProcedure,
			connect.WithSchema(cerbosStoreServiceGetPoliciesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		modifyPolicies: connect.NewClient[v1.ModifyPoliciesRequest, v1.ModifyPoliciesResponse](
			httpClient,
			baseURL+CerbosStoreServiceModifyPoliciesProcedure,
			connect.WithSchema(cerbosStoreServiceModifyPoliciesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// cerbosStoreServiceClient implements CerbosStoreServiceClient.
type cerbosStoreServiceClient struct {
	listPolicies   *connect.Client[v1.ListPoliciesRequest, v1.ListPoliciesResponse]
	getPolicies    *connect.Client[v1.GetPoliciesRequest, v1.GetPoliciesResponse]
	modifyPolicies *connect.Client[v1.ModifyPoliciesRequest, v1.ModifyPoliciesResponse]
}

// ListPolicies calls cerbos.cloud.store.v1.CerbosStoreService.ListPolicies.
func (c *cerbosStoreServiceClient) ListPolicies(ctx context.Context, req *connect.Request[v1.ListPoliciesRequest]) (*connect.Response[v1.ListPoliciesResponse], error) {
	return c.listPolicies.CallUnary(ctx, req)
}

// GetPolicies calls cerbos.cloud.store.v1.CerbosStoreService.GetPolicies.
func (c *cerbosStoreServiceClient) GetPolicies(ctx context.Context, req *connect.Request[v1.GetPoliciesRequest]) (*connect.Response[v1.GetPoliciesResponse], error) {
	return c.getPolicies.CallUnary(ctx, req)
}

// ModifyPolicies calls cerbos.cloud.store.v1.CerbosStoreService.ModifyPolicies.
func (c *cerbosStoreServiceClient) ModifyPolicies(ctx context.Context, req *connect.Request[v1.ModifyPoliciesRequest]) (*connect.Response[v1.ModifyPoliciesResponse], error) {
	return c.modifyPolicies.CallUnary(ctx, req)
}

// CerbosStoreServiceHandler is an implementation of the cerbos.cloud.store.v1.CerbosStoreService
// service.
type CerbosStoreServiceHandler interface {
	ListPolicies(context.Context, *connect.Request[v1.ListPoliciesRequest]) (*connect.Response[v1.ListPoliciesResponse], error)
	GetPolicies(context.Context, *connect.Request[v1.GetPoliciesRequest]) (*connect.Response[v1.GetPoliciesResponse], error)
	ModifyPolicies(context.Context, *connect.Request[v1.ModifyPoliciesRequest]) (*connect.Response[v1.ModifyPoliciesResponse], error)
}

// NewCerbosStoreServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCerbosStoreServiceHandler(svc CerbosStoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cerbosStoreServiceListPoliciesHandler := connect.NewUnaryHandler(
		CerbosStoreServiceListPoliciesProcedure,
		svc.ListPolicies,
		connect.WithSchema(cerbosStoreServiceListPoliciesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	cerbosStoreServiceGetPoliciesHandler := connect.NewUnaryHandler(
		CerbosStoreServiceGetPoliciesProcedure,
		svc.GetPolicies,
		connect.WithSchema(cerbosStoreServiceGetPoliciesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	cerbosStoreServiceModifyPoliciesHandler := connect.NewUnaryHandler(
		CerbosStoreServiceModifyPoliciesProcedure,
		svc.ModifyPolicies,
		connect.WithSchema(cerbosStoreServiceModifyPoliciesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/cerbos.cloud.store.v1.CerbosStoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CerbosStoreServiceListPoliciesProcedure:
			cerbosStoreServiceListPoliciesHandler.ServeHTTP(w, r)
		case CerbosStoreServiceGetPoliciesProcedure:
			cerbosStoreServiceGetPoliciesHandler.ServeHTTP(w, r)
		case CerbosStoreServiceModifyPoliciesProcedure:
			cerbosStoreServiceModifyPoliciesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCerbosStoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCerbosStoreServiceHandler struct{}

func (UnimplementedCerbosStoreServiceHandler) ListPolicies(context.Context, *connect.Request[v1.ListPoliciesRequest]) (*connect.Response[v1.ListPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cerbos.cloud.store.v1.CerbosStoreService.ListPolicies is not implemented"))
}

func (UnimplementedCerbosStoreServiceHandler) GetPolicies(context.Context, *connect.Request[v1.GetPoliciesRequest]) (*connect.Response[v1.GetPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cerbos.cloud.store.v1.CerbosStoreService.GetPolicies is not implemented"))
}

func (UnimplementedCerbosStoreServiceHandler) ModifyPolicies(context.Context, *connect.Request[v1.ModifyPoliciesRequest]) (*connect.Response[v1.ModifyPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cerbos.cloud.store.v1.CerbosStoreService.ModifyPolicies is not implemented"))
}
