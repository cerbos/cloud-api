// Copyright 2021-2024 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cerbos/cloud/store/v1/store.proto

package storev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/cerbos/cloud-api/genpb/cerbos/cloud/store/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CerbosStoresServiceName is the fully-qualified name of the CerbosStoresService service.
	CerbosStoresServiceName = "cerbos.cloud.store.v1.CerbosStoresService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CerbosStoresServiceCreateStoreProcedure is the fully-qualified name of the CerbosStoresService's
	// CreateStore RPC.
	CerbosStoresServiceCreateStoreProcedure = "/cerbos.cloud.store.v1.CerbosStoresService/CreateStore"
	// CerbosStoresServiceListStoresProcedure is the fully-qualified name of the CerbosStoresService's
	// ListStores RPC.
	CerbosStoresServiceListStoresProcedure = "/cerbos.cloud.store.v1.CerbosStoresService/ListStores"
	// CerbosStoresServiceGetPoliciesProcedure is the fully-qualified name of the CerbosStoresService's
	// GetPolicies RPC.
	CerbosStoresServiceGetPoliciesProcedure = "/cerbos.cloud.store.v1.CerbosStoresService/GetPolicies"
	// CerbosStoresServiceListPoliciesProcedure is the fully-qualified name of the CerbosStoresService's
	// ListPolicies RPC.
	CerbosStoresServiceListPoliciesProcedure = "/cerbos.cloud.store.v1.CerbosStoresService/ListPolicies"
	// CerbosStoresServiceModifyPoliciesProcedure is the fully-qualified name of the
	// CerbosStoresService's ModifyPolicies RPC.
	CerbosStoresServiceModifyPoliciesProcedure = "/cerbos.cloud.store.v1.CerbosStoresService/ModifyPolicies"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	cerbosStoresServiceServiceDescriptor              = v1.File_cerbos_cloud_store_v1_store_proto.Services().ByName("CerbosStoresService")
	cerbosStoresServiceCreateStoreMethodDescriptor    = cerbosStoresServiceServiceDescriptor.Methods().ByName("CreateStore")
	cerbosStoresServiceListStoresMethodDescriptor     = cerbosStoresServiceServiceDescriptor.Methods().ByName("ListStores")
	cerbosStoresServiceGetPoliciesMethodDescriptor    = cerbosStoresServiceServiceDescriptor.Methods().ByName("GetPolicies")
	cerbosStoresServiceListPoliciesMethodDescriptor   = cerbosStoresServiceServiceDescriptor.Methods().ByName("ListPolicies")
	cerbosStoresServiceModifyPoliciesMethodDescriptor = cerbosStoresServiceServiceDescriptor.Methods().ByName("ModifyPolicies")
)

// CerbosStoresServiceClient is a client for the cerbos.cloud.store.v1.CerbosStoresService service.
type CerbosStoresServiceClient interface {
	CreateStore(context.Context, *connect.Request[v1.CreateStoreRequest]) (*connect.Response[v1.CreateStoreResponse], error)
	ListStores(context.Context, *connect.Request[v1.ListStoresRequest]) (*connect.Response[v1.ListStoresResponse], error)
	GetPolicies(context.Context, *connect.Request[v1.GetPoliciesRequest]) (*connect.Response[v1.GetPoliciesResponse], error)
	ListPolicies(context.Context, *connect.Request[v1.ListPoliciesRequest]) (*connect.Response[v1.ListPoliciesResponse], error)
	ModifyPolicies(context.Context, *connect.Request[v1.ModifyPoliciesRequest]) (*connect.Response[v1.ModifyPoliciesResponse], error)
}

// NewCerbosStoresServiceClient constructs a client for the
// cerbos.cloud.store.v1.CerbosStoresService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCerbosStoresServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CerbosStoresServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &cerbosStoresServiceClient{
		createStore: connect.NewClient[v1.CreateStoreRequest, v1.CreateStoreResponse](
			httpClient,
			baseURL+CerbosStoresServiceCreateStoreProcedure,
			connect.WithSchema(cerbosStoresServiceCreateStoreMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listStores: connect.NewClient[v1.ListStoresRequest, v1.ListStoresResponse](
			httpClient,
			baseURL+CerbosStoresServiceListStoresProcedure,
			connect.WithSchema(cerbosStoresServiceListStoresMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getPolicies: connect.NewClient[v1.GetPoliciesRequest, v1.GetPoliciesResponse](
			httpClient,
			baseURL+CerbosStoresServiceGetPoliciesProcedure,
			connect.WithSchema(cerbosStoresServiceGetPoliciesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listPolicies: connect.NewClient[v1.ListPoliciesRequest, v1.ListPoliciesResponse](
			httpClient,
			baseURL+CerbosStoresServiceListPoliciesProcedure,
			connect.WithSchema(cerbosStoresServiceListPoliciesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		modifyPolicies: connect.NewClient[v1.ModifyPoliciesRequest, v1.ModifyPoliciesResponse](
			httpClient,
			baseURL+CerbosStoresServiceModifyPoliciesProcedure,
			connect.WithSchema(cerbosStoresServiceModifyPoliciesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// cerbosStoresServiceClient implements CerbosStoresServiceClient.
type cerbosStoresServiceClient struct {
	createStore    *connect.Client[v1.CreateStoreRequest, v1.CreateStoreResponse]
	listStores     *connect.Client[v1.ListStoresRequest, v1.ListStoresResponse]
	getPolicies    *connect.Client[v1.GetPoliciesRequest, v1.GetPoliciesResponse]
	listPolicies   *connect.Client[v1.ListPoliciesRequest, v1.ListPoliciesResponse]
	modifyPolicies *connect.Client[v1.ModifyPoliciesRequest, v1.ModifyPoliciesResponse]
}

// CreateStore calls cerbos.cloud.store.v1.CerbosStoresService.CreateStore.
func (c *cerbosStoresServiceClient) CreateStore(ctx context.Context, req *connect.Request[v1.CreateStoreRequest]) (*connect.Response[v1.CreateStoreResponse], error) {
	return c.createStore.CallUnary(ctx, req)
}

// ListStores calls cerbos.cloud.store.v1.CerbosStoresService.ListStores.
func (c *cerbosStoresServiceClient) ListStores(ctx context.Context, req *connect.Request[v1.ListStoresRequest]) (*connect.Response[v1.ListStoresResponse], error) {
	return c.listStores.CallUnary(ctx, req)
}

// GetPolicies calls cerbos.cloud.store.v1.CerbosStoresService.GetPolicies.
func (c *cerbosStoresServiceClient) GetPolicies(ctx context.Context, req *connect.Request[v1.GetPoliciesRequest]) (*connect.Response[v1.GetPoliciesResponse], error) {
	return c.getPolicies.CallUnary(ctx, req)
}

// ListPolicies calls cerbos.cloud.store.v1.CerbosStoresService.ListPolicies.
func (c *cerbosStoresServiceClient) ListPolicies(ctx context.Context, req *connect.Request[v1.ListPoliciesRequest]) (*connect.Response[v1.ListPoliciesResponse], error) {
	return c.listPolicies.CallUnary(ctx, req)
}

// ModifyPolicies calls cerbos.cloud.store.v1.CerbosStoresService.ModifyPolicies.
func (c *cerbosStoresServiceClient) ModifyPolicies(ctx context.Context, req *connect.Request[v1.ModifyPoliciesRequest]) (*connect.Response[v1.ModifyPoliciesResponse], error) {
	return c.modifyPolicies.CallUnary(ctx, req)
}

// CerbosStoresServiceHandler is an implementation of the cerbos.cloud.store.v1.CerbosStoresService
// service.
type CerbosStoresServiceHandler interface {
	CreateStore(context.Context, *connect.Request[v1.CreateStoreRequest]) (*connect.Response[v1.CreateStoreResponse], error)
	ListStores(context.Context, *connect.Request[v1.ListStoresRequest]) (*connect.Response[v1.ListStoresResponse], error)
	GetPolicies(context.Context, *connect.Request[v1.GetPoliciesRequest]) (*connect.Response[v1.GetPoliciesResponse], error)
	ListPolicies(context.Context, *connect.Request[v1.ListPoliciesRequest]) (*connect.Response[v1.ListPoliciesResponse], error)
	ModifyPolicies(context.Context, *connect.Request[v1.ModifyPoliciesRequest]) (*connect.Response[v1.ModifyPoliciesResponse], error)
}

// NewCerbosStoresServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCerbosStoresServiceHandler(svc CerbosStoresServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cerbosStoresServiceCreateStoreHandler := connect.NewUnaryHandler(
		CerbosStoresServiceCreateStoreProcedure,
		svc.CreateStore,
		connect.WithSchema(cerbosStoresServiceCreateStoreMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cerbosStoresServiceListStoresHandler := connect.NewUnaryHandler(
		CerbosStoresServiceListStoresProcedure,
		svc.ListStores,
		connect.WithSchema(cerbosStoresServiceListStoresMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	cerbosStoresServiceGetPoliciesHandler := connect.NewUnaryHandler(
		CerbosStoresServiceGetPoliciesProcedure,
		svc.GetPolicies,
		connect.WithSchema(cerbosStoresServiceGetPoliciesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	cerbosStoresServiceListPoliciesHandler := connect.NewUnaryHandler(
		CerbosStoresServiceListPoliciesProcedure,
		svc.ListPolicies,
		connect.WithSchema(cerbosStoresServiceListPoliciesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	cerbosStoresServiceModifyPoliciesHandler := connect.NewUnaryHandler(
		CerbosStoresServiceModifyPoliciesProcedure,
		svc.ModifyPolicies,
		connect.WithSchema(cerbosStoresServiceModifyPoliciesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/cerbos.cloud.store.v1.CerbosStoresService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CerbosStoresServiceCreateStoreProcedure:
			cerbosStoresServiceCreateStoreHandler.ServeHTTP(w, r)
		case CerbosStoresServiceListStoresProcedure:
			cerbosStoresServiceListStoresHandler.ServeHTTP(w, r)
		case CerbosStoresServiceGetPoliciesProcedure:
			cerbosStoresServiceGetPoliciesHandler.ServeHTTP(w, r)
		case CerbosStoresServiceListPoliciesProcedure:
			cerbosStoresServiceListPoliciesHandler.ServeHTTP(w, r)
		case CerbosStoresServiceModifyPoliciesProcedure:
			cerbosStoresServiceModifyPoliciesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCerbosStoresServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCerbosStoresServiceHandler struct{}

func (UnimplementedCerbosStoresServiceHandler) CreateStore(context.Context, *connect.Request[v1.CreateStoreRequest]) (*connect.Response[v1.CreateStoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cerbos.cloud.store.v1.CerbosStoresService.CreateStore is not implemented"))
}

func (UnimplementedCerbosStoresServiceHandler) ListStores(context.Context, *connect.Request[v1.ListStoresRequest]) (*connect.Response[v1.ListStoresResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cerbos.cloud.store.v1.CerbosStoresService.ListStores is not implemented"))
}

func (UnimplementedCerbosStoresServiceHandler) GetPolicies(context.Context, *connect.Request[v1.GetPoliciesRequest]) (*connect.Response[v1.GetPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cerbos.cloud.store.v1.CerbosStoresService.GetPolicies is not implemented"))
}

func (UnimplementedCerbosStoresServiceHandler) ListPolicies(context.Context, *connect.Request[v1.ListPoliciesRequest]) (*connect.Response[v1.ListPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cerbos.cloud.store.v1.CerbosStoresService.ListPolicies is not implemented"))
}

func (UnimplementedCerbosStoresServiceHandler) ModifyPolicies(context.Context, *connect.Request[v1.ModifyPoliciesRequest]) (*connect.Response[v1.ModifyPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cerbos.cloud.store.v1.CerbosStoresService.ModifyPolicies is not implemented"))
}
