// Copyright 2021-2025 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: cerbos/cloud/logs/v1/logs.proto

package logsv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v11 "github.com/cerbos/cerbos/api/genpb/cerbos/audit/v1"
	v1 "github.com/cerbos/cloud-api/genpb/cerbos/cloud/pdp/v1"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IngestBatch_EntryKind int32

const (
	IngestBatch_ENTRY_KIND_UNSPECIFIED  IngestBatch_EntryKind = 0
	IngestBatch_ENTRY_KIND_ACCESS_LOG   IngestBatch_EntryKind = 1
	IngestBatch_ENTRY_KIND_DECISION_LOG IngestBatch_EntryKind = 2
)

// Enum value maps for IngestBatch_EntryKind.
var (
	IngestBatch_EntryKind_name = map[int32]string{
		0: "ENTRY_KIND_UNSPECIFIED",
		1: "ENTRY_KIND_ACCESS_LOG",
		2: "ENTRY_KIND_DECISION_LOG",
	}
	IngestBatch_EntryKind_value = map[string]int32{
		"ENTRY_KIND_UNSPECIFIED":  0,
		"ENTRY_KIND_ACCESS_LOG":   1,
		"ENTRY_KIND_DECISION_LOG": 2,
	}
)

func (x IngestBatch_EntryKind) Enum() *IngestBatch_EntryKind {
	p := new(IngestBatch_EntryKind)
	*p = x
	return p
}

func (x IngestBatch_EntryKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IngestBatch_EntryKind) Descriptor() protoreflect.EnumDescriptor {
	return file_cerbos_cloud_logs_v1_logs_proto_enumTypes[0].Descriptor()
}

func (IngestBatch_EntryKind) Type() protoreflect.EnumType {
	return &file_cerbos_cloud_logs_v1_logs_proto_enumTypes[0]
}

func (x IngestBatch_EntryKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IngestBatch_EntryKind.Descriptor instead.
func (IngestBatch_EntryKind) EnumDescriptor() ([]byte, []int) {
	return file_cerbos_cloud_logs_v1_logs_proto_rawDescGZIP(), []int{0, 0}
}

type IngestBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Entries       []*IngestBatch_Entry   `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestBatch) Reset() {
	*x = IngestBatch{}
	mi := &file_cerbos_cloud_logs_v1_logs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestBatch) ProtoMessage() {}

func (x *IngestBatch) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_logs_v1_logs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestBatch.ProtoReflect.Descriptor instead.
func (*IngestBatch) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_logs_v1_logs_proto_rawDescGZIP(), []int{0}
}

func (x *IngestBatch) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IngestBatch) GetEntries() []*IngestBatch_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type IngestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PdpId         *v1.Identifier         `protobuf:"bytes,1,opt,name=pdp_id,json=pdpId,proto3" json:"pdp_id,omitempty"`
	Batch         *IngestBatch           `protobuf:"bytes,2,opt,name=batch,proto3" json:"batch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestRequest) Reset() {
	*x = IngestRequest{}
	mi := &file_cerbos_cloud_logs_v1_logs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestRequest) ProtoMessage() {}

func (x *IngestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_logs_v1_logs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestRequest.ProtoReflect.Descriptor instead.
func (*IngestRequest) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_logs_v1_logs_proto_rawDescGZIP(), []int{1}
}

func (x *IngestRequest) GetPdpId() *v1.Identifier {
	if x != nil {
		return x.PdpId
	}
	return nil
}

func (x *IngestRequest) GetBatch() *IngestBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

type IngestResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Status:
	//
	//	*IngestResponse_Success
	//	*IngestResponse_Backoff_
	Status        isIngestResponse_Status `protobuf_oneof:"status"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestResponse) Reset() {
	*x = IngestResponse{}
	mi := &file_cerbos_cloud_logs_v1_logs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestResponse) ProtoMessage() {}

func (x *IngestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_logs_v1_logs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestResponse.ProtoReflect.Descriptor instead.
func (*IngestResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_logs_v1_logs_proto_rawDescGZIP(), []int{2}
}

func (x *IngestResponse) GetStatus() isIngestResponse_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *IngestResponse) GetSuccess() *emptypb.Empty {
	if x != nil {
		if x, ok := x.Status.(*IngestResponse_Success); ok {
			return x.Success
		}
	}
	return nil
}

func (x *IngestResponse) GetBackoff() *IngestResponse_Backoff {
	if x != nil {
		if x, ok := x.Status.(*IngestResponse_Backoff_); ok {
			return x.Backoff
		}
	}
	return nil
}

type isIngestResponse_Status interface {
	isIngestResponse_Status()
}

type IngestResponse_Success struct {
	Success *emptypb.Empty `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type IngestResponse_Backoff_ struct {
	Backoff *IngestResponse_Backoff `protobuf:"bytes,2,opt,name=backoff,proto3,oneof"`
}

func (*IngestResponse_Success) isIngestResponse_Status() {}

func (*IngestResponse_Backoff_) isIngestResponse_Status() {}

type IngestBatch_Entry struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Kind      IngestBatch_EntryKind  `protobuf:"varint,1,opt,name=kind,proto3,enum=cerbos.cloud.logs.v1.IngestBatch_EntryKind" json:"kind,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are valid to be assigned to Entry:
	//
	//	*IngestBatch_Entry_AccessLogEntry
	//	*IngestBatch_Entry_DecisionLogEntry
	Entry         isIngestBatch_Entry_Entry `protobuf_oneof:"entry"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestBatch_Entry) Reset() {
	*x = IngestBatch_Entry{}
	mi := &file_cerbos_cloud_logs_v1_logs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestBatch_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestBatch_Entry) ProtoMessage() {}

func (x *IngestBatch_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_logs_v1_logs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestBatch_Entry.ProtoReflect.Descriptor instead.
func (*IngestBatch_Entry) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_logs_v1_logs_proto_rawDescGZIP(), []int{0, 0}
}

func (x *IngestBatch_Entry) GetKind() IngestBatch_EntryKind {
	if x != nil {
		return x.Kind
	}
	return IngestBatch_ENTRY_KIND_UNSPECIFIED
}

func (x *IngestBatch_Entry) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *IngestBatch_Entry) GetEntry() isIngestBatch_Entry_Entry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *IngestBatch_Entry) GetAccessLogEntry() *v11.AccessLogEntry {
	if x != nil {
		if x, ok := x.Entry.(*IngestBatch_Entry_AccessLogEntry); ok {
			return x.AccessLogEntry
		}
	}
	return nil
}

func (x *IngestBatch_Entry) GetDecisionLogEntry() *v11.DecisionLogEntry {
	if x != nil {
		if x, ok := x.Entry.(*IngestBatch_Entry_DecisionLogEntry); ok {
			return x.DecisionLogEntry
		}
	}
	return nil
}

type isIngestBatch_Entry_Entry interface {
	isIngestBatch_Entry_Entry()
}

type IngestBatch_Entry_AccessLogEntry struct {
	AccessLogEntry *v11.AccessLogEntry `protobuf:"bytes,3,opt,name=access_log_entry,json=accessLogEntry,proto3,oneof"`
}

type IngestBatch_Entry_DecisionLogEntry struct {
	DecisionLogEntry *v11.DecisionLogEntry `protobuf:"bytes,4,opt,name=decision_log_entry,json=decisionLogEntry,proto3,oneof"`
}

func (*IngestBatch_Entry_AccessLogEntry) isIngestBatch_Entry_Entry() {}

func (*IngestBatch_Entry_DecisionLogEntry) isIngestBatch_Entry_Entry() {}

type IngestResponse_Backoff struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Duration      *durationpb.Duration   `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngestResponse_Backoff) Reset() {
	*x = IngestResponse_Backoff{}
	mi := &file_cerbos_cloud_logs_v1_logs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngestResponse_Backoff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestResponse_Backoff) ProtoMessage() {}

func (x *IngestResponse_Backoff) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_logs_v1_logs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestResponse_Backoff.ProtoReflect.Descriptor instead.
func (*IngestResponse_Backoff) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_logs_v1_logs_proto_rawDescGZIP(), []int{2, 0}
}

func (x *IngestResponse_Backoff) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

var File_cerbos_cloud_logs_v1_logs_proto protoreflect.FileDescriptor

const file_cerbos_cloud_logs_v1_logs_proto_rawDesc = "" +
	"\n" +
	"\x1fcerbos/cloud/logs/v1/logs.proto\x12\x14cerbos.cloud.logs.v1\x1a\x1bbuf/validate/validate.proto\x1a\x1bcerbos/audit/v1/audit.proto\x1a\x1dcerbos/cloud/pdp/v1/pdp.proto\x1a\x1bgoogle/api/visibility.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x97\x04\n" +
	"\vIngestBatch\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12N\n" +
	"\aentries\x18\x02 \x03(\v2'.cerbos.cloud.logs.v1.IngestBatch.EntryB\v\xbaH\b\x92\x01\x05\b\x01\x10\x80\bR\aentries\x1a\xc6\x02\n" +
	"\x05Entry\x12K\n" +
	"\x04kind\x18\x01 \x01(\x0e2+.cerbos.cloud.logs.v1.IngestBatch.EntryKindB\n" +
	"\xbaH\a\x82\x01\x04\x18\x01\x18\x02R\x04kind\x12@\n" +
	"\ttimestamp\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampB\x06\xbaH\x03\xc8\x01\x01R\ttimestamp\x12K\n" +
	"\x10access_log_entry\x18\x03 \x01(\v2\x1f.cerbos.audit.v1.AccessLogEntryH\x00R\x0eaccessLogEntry\x12Q\n" +
	"\x12decision_log_entry\x18\x04 \x01(\v2!.cerbos.audit.v1.DecisionLogEntryH\x00R\x10decisionLogEntryB\x0e\n" +
	"\x05entry\x12\x05\xbaH\x02\b\x01\"_\n" +
	"\tEntryKind\x12\x1a\n" +
	"\x16ENTRY_KIND_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15ENTRY_KIND_ACCESS_LOG\x10\x01\x12\x1b\n" +
	"\x17ENTRY_KIND_DECISION_LOG\x10\x02\"\x90\x01\n" +
	"\rIngestRequest\x12>\n" +
	"\x06pdp_id\x18\x01 \x01(\v2\x1f.cerbos.cloud.pdp.v1.IdentifierB\x06\xbaH\x03\xc8\x01\x01R\x05pdpId\x12?\n" +
	"\x05batch\x18\x02 \x01(\v2!.cerbos.cloud.logs.v1.IngestBatchB\x06\xbaH\x03\xc8\x01\x01R\x05batch\"\xda\x01\n" +
	"\x0eIngestResponse\x122\n" +
	"\asuccess\x18\x01 \x01(\v2\x16.google.protobuf.EmptyH\x00R\asuccess\x12H\n" +
	"\abackoff\x18\x02 \x01(\v2,.cerbos.cloud.logs.v1.IngestResponse.BackoffH\x00R\abackoff\x1a@\n" +
	"\aBackoff\x125\n" +
	"\bduration\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\bdurationB\b\n" +
	"\x06status2\x80\x01\n" +
	"\x11CerbosLogsService\x12U\n" +
	"\x06Ingest\x12#.cerbos.cloud.logs.v1.IngestRequest\x1a$.cerbos.cloud.logs.v1.IngestResponse\"\x00\x1a\x14\xfa\xd2\xe4\x93\x02\x0e\x12\fEXPERIMENTALBx\n" +
	"\x1cdev.cerbos.api.cloud.v1.logsZ=github.com/cerbos/cloud-api/genpb/cerbos/cloud/logs/v1;logsv1\xaa\x02\x18Cerbos.Api.Cloud.V1.Logsb\x06proto3"

var (
	file_cerbos_cloud_logs_v1_logs_proto_rawDescOnce sync.Once
	file_cerbos_cloud_logs_v1_logs_proto_rawDescData []byte
)

func file_cerbos_cloud_logs_v1_logs_proto_rawDescGZIP() []byte {
	file_cerbos_cloud_logs_v1_logs_proto_rawDescOnce.Do(func() {
		file_cerbos_cloud_logs_v1_logs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cerbos_cloud_logs_v1_logs_proto_rawDesc), len(file_cerbos_cloud_logs_v1_logs_proto_rawDesc)))
	})
	return file_cerbos_cloud_logs_v1_logs_proto_rawDescData
}

var file_cerbos_cloud_logs_v1_logs_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cerbos_cloud_logs_v1_logs_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_cerbos_cloud_logs_v1_logs_proto_goTypes = []any{
	(IngestBatch_EntryKind)(0),     // 0: cerbos.cloud.logs.v1.IngestBatch.EntryKind
	(*IngestBatch)(nil),            // 1: cerbos.cloud.logs.v1.IngestBatch
	(*IngestRequest)(nil),          // 2: cerbos.cloud.logs.v1.IngestRequest
	(*IngestResponse)(nil),         // 3: cerbos.cloud.logs.v1.IngestResponse
	(*IngestBatch_Entry)(nil),      // 4: cerbos.cloud.logs.v1.IngestBatch.Entry
	(*IngestResponse_Backoff)(nil), // 5: cerbos.cloud.logs.v1.IngestResponse.Backoff
	(*v1.Identifier)(nil),          // 6: cerbos.cloud.pdp.v1.Identifier
	(*emptypb.Empty)(nil),          // 7: google.protobuf.Empty
	(*timestamppb.Timestamp)(nil),  // 8: google.protobuf.Timestamp
	(*v11.AccessLogEntry)(nil),     // 9: cerbos.audit.v1.AccessLogEntry
	(*v11.DecisionLogEntry)(nil),   // 10: cerbos.audit.v1.DecisionLogEntry
	(*durationpb.Duration)(nil),    // 11: google.protobuf.Duration
}
var file_cerbos_cloud_logs_v1_logs_proto_depIdxs = []int32{
	4,  // 0: cerbos.cloud.logs.v1.IngestBatch.entries:type_name -> cerbos.cloud.logs.v1.IngestBatch.Entry
	6,  // 1: cerbos.cloud.logs.v1.IngestRequest.pdp_id:type_name -> cerbos.cloud.pdp.v1.Identifier
	1,  // 2: cerbos.cloud.logs.v1.IngestRequest.batch:type_name -> cerbos.cloud.logs.v1.IngestBatch
	7,  // 3: cerbos.cloud.logs.v1.IngestResponse.success:type_name -> google.protobuf.Empty
	5,  // 4: cerbos.cloud.logs.v1.IngestResponse.backoff:type_name -> cerbos.cloud.logs.v1.IngestResponse.Backoff
	0,  // 5: cerbos.cloud.logs.v1.IngestBatch.Entry.kind:type_name -> cerbos.cloud.logs.v1.IngestBatch.EntryKind
	8,  // 6: cerbos.cloud.logs.v1.IngestBatch.Entry.timestamp:type_name -> google.protobuf.Timestamp
	9,  // 7: cerbos.cloud.logs.v1.IngestBatch.Entry.access_log_entry:type_name -> cerbos.audit.v1.AccessLogEntry
	10, // 8: cerbos.cloud.logs.v1.IngestBatch.Entry.decision_log_entry:type_name -> cerbos.audit.v1.DecisionLogEntry
	11, // 9: cerbos.cloud.logs.v1.IngestResponse.Backoff.duration:type_name -> google.protobuf.Duration
	2,  // 10: cerbos.cloud.logs.v1.CerbosLogsService.Ingest:input_type -> cerbos.cloud.logs.v1.IngestRequest
	3,  // 11: cerbos.cloud.logs.v1.CerbosLogsService.Ingest:output_type -> cerbos.cloud.logs.v1.IngestResponse
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_cerbos_cloud_logs_v1_logs_proto_init() }
func file_cerbos_cloud_logs_v1_logs_proto_init() {
	if File_cerbos_cloud_logs_v1_logs_proto != nil {
		return
	}
	file_cerbos_cloud_logs_v1_logs_proto_msgTypes[2].OneofWrappers = []any{
		(*IngestResponse_Success)(nil),
		(*IngestResponse_Backoff_)(nil),
	}
	file_cerbos_cloud_logs_v1_logs_proto_msgTypes[3].OneofWrappers = []any{
		(*IngestBatch_Entry_AccessLogEntry)(nil),
		(*IngestBatch_Entry_DecisionLogEntry)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cerbos_cloud_logs_v1_logs_proto_rawDesc), len(file_cerbos_cloud_logs_v1_logs_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cerbos_cloud_logs_v1_logs_proto_goTypes,
		DependencyIndexes: file_cerbos_cloud_logs_v1_logs_proto_depIdxs,
		EnumInfos:         file_cerbos_cloud_logs_v1_logs_proto_enumTypes,
		MessageInfos:      file_cerbos_cloud_logs_v1_logs_proto_msgTypes,
	}.Build()
	File_cerbos_cloud_logs_v1_logs_proto = out.File
	file_cerbos_cloud_logs_v1_logs_proto_goTypes = nil
	file_cerbos_cloud_logs_v1_logs_proto_depIdxs = nil
}
