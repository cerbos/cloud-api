// Copyright 2021-2024 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: cerbos/cloud/logs/v1/logs.proto

package logsv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v11 "github.com/cerbos/cerbos/api/genpb/cerbos/audit/v1"
	v1 "github.com/cerbos/cloud-api/genpb/cerbos/cloud/pdp/v1"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IngestBatch_EntryKind int32

const (
	IngestBatch_ENTRY_KIND_UNSPECIFIED  IngestBatch_EntryKind = 0
	IngestBatch_ENTRY_KIND_ACCESS_LOG   IngestBatch_EntryKind = 1
	IngestBatch_ENTRY_KIND_DECISION_LOG IngestBatch_EntryKind = 2
)

// Enum value maps for IngestBatch_EntryKind.
var (
	IngestBatch_EntryKind_name = map[int32]string{
		0: "ENTRY_KIND_UNSPECIFIED",
		1: "ENTRY_KIND_ACCESS_LOG",
		2: "ENTRY_KIND_DECISION_LOG",
	}
	IngestBatch_EntryKind_value = map[string]int32{
		"ENTRY_KIND_UNSPECIFIED":  0,
		"ENTRY_KIND_ACCESS_LOG":   1,
		"ENTRY_KIND_DECISION_LOG": 2,
	}
)

func (x IngestBatch_EntryKind) Enum() *IngestBatch_EntryKind {
	p := new(IngestBatch_EntryKind)
	*p = x
	return p
}

func (x IngestBatch_EntryKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IngestBatch_EntryKind) Descriptor() protoreflect.EnumDescriptor {
	return file_cerbos_cloud_logs_v1_logs_proto_enumTypes[0].Descriptor()
}

func (IngestBatch_EntryKind) Type() protoreflect.EnumType {
	return &file_cerbos_cloud_logs_v1_logs_proto_enumTypes[0]
}

func (x IngestBatch_EntryKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IngestBatch_EntryKind.Descriptor instead.
func (IngestBatch_EntryKind) EnumDescriptor() ([]byte, []int) {
	return file_cerbos_cloud_logs_v1_logs_proto_rawDescGZIP(), []int{0, 0}
}

type IngestBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Entries []*IngestBatch_Entry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *IngestBatch) Reset() {
	*x = IngestBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_cloud_logs_v1_logs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestBatch) ProtoMessage() {}

func (x *IngestBatch) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_logs_v1_logs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestBatch.ProtoReflect.Descriptor instead.
func (*IngestBatch) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_logs_v1_logs_proto_rawDescGZIP(), []int{0}
}

func (x *IngestBatch) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IngestBatch) GetEntries() []*IngestBatch_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type IngestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PdpId *v1.Identifier `protobuf:"bytes,1,opt,name=pdp_id,json=pdpId,proto3" json:"pdp_id,omitempty"`
	Batch *IngestBatch   `protobuf:"bytes,2,opt,name=batch,proto3" json:"batch,omitempty"`
}

func (x *IngestRequest) Reset() {
	*x = IngestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_cloud_logs_v1_logs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestRequest) ProtoMessage() {}

func (x *IngestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_logs_v1_logs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestRequest.ProtoReflect.Descriptor instead.
func (*IngestRequest) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_logs_v1_logs_proto_rawDescGZIP(), []int{1}
}

func (x *IngestRequest) GetPdpId() *v1.Identifier {
	if x != nil {
		return x.PdpId
	}
	return nil
}

func (x *IngestRequest) GetBatch() *IngestBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

type IngestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Status:
	//
	//	*IngestResponse_Success
	//	*IngestResponse_Backoff_
	Status isIngestResponse_Status `protobuf_oneof:"status"`
}

func (x *IngestResponse) Reset() {
	*x = IngestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_cloud_logs_v1_logs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestResponse) ProtoMessage() {}

func (x *IngestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_logs_v1_logs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestResponse.ProtoReflect.Descriptor instead.
func (*IngestResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_logs_v1_logs_proto_rawDescGZIP(), []int{2}
}

func (m *IngestResponse) GetStatus() isIngestResponse_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (x *IngestResponse) GetSuccess() *emptypb.Empty {
	if x, ok := x.GetStatus().(*IngestResponse_Success); ok {
		return x.Success
	}
	return nil
}

func (x *IngestResponse) GetBackoff() *IngestResponse_Backoff {
	if x, ok := x.GetStatus().(*IngestResponse_Backoff_); ok {
		return x.Backoff
	}
	return nil
}

type isIngestResponse_Status interface {
	isIngestResponse_Status()
}

type IngestResponse_Success struct {
	Success *emptypb.Empty `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type IngestResponse_Backoff_ struct {
	Backoff *IngestResponse_Backoff `protobuf:"bytes,2,opt,name=backoff,proto3,oneof"`
}

func (*IngestResponse_Success) isIngestResponse_Status() {}

func (*IngestResponse_Backoff_) isIngestResponse_Status() {}

type IngestBatch_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind      IngestBatch_EntryKind  `protobuf:"varint,1,opt,name=kind,proto3,enum=cerbos.cloud.logs.v1.IngestBatch_EntryKind" json:"kind,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to Entry:
	//
	//	*IngestBatch_Entry_AccessLogEntry
	//	*IngestBatch_Entry_DecisionLogEntry
	Entry isIngestBatch_Entry_Entry `protobuf_oneof:"entry"`
}

func (x *IngestBatch_Entry) Reset() {
	*x = IngestBatch_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_cloud_logs_v1_logs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestBatch_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestBatch_Entry) ProtoMessage() {}

func (x *IngestBatch_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_logs_v1_logs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestBatch_Entry.ProtoReflect.Descriptor instead.
func (*IngestBatch_Entry) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_logs_v1_logs_proto_rawDescGZIP(), []int{0, 0}
}

func (x *IngestBatch_Entry) GetKind() IngestBatch_EntryKind {
	if x != nil {
		return x.Kind
	}
	return IngestBatch_ENTRY_KIND_UNSPECIFIED
}

func (x *IngestBatch_Entry) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *IngestBatch_Entry) GetEntry() isIngestBatch_Entry_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *IngestBatch_Entry) GetAccessLogEntry() *v11.AccessLogEntry {
	if x, ok := x.GetEntry().(*IngestBatch_Entry_AccessLogEntry); ok {
		return x.AccessLogEntry
	}
	return nil
}

func (x *IngestBatch_Entry) GetDecisionLogEntry() *v11.DecisionLogEntry {
	if x, ok := x.GetEntry().(*IngestBatch_Entry_DecisionLogEntry); ok {
		return x.DecisionLogEntry
	}
	return nil
}

type isIngestBatch_Entry_Entry interface {
	isIngestBatch_Entry_Entry()
}

type IngestBatch_Entry_AccessLogEntry struct {
	AccessLogEntry *v11.AccessLogEntry `protobuf:"bytes,3,opt,name=access_log_entry,json=accessLogEntry,proto3,oneof"`
}

type IngestBatch_Entry_DecisionLogEntry struct {
	DecisionLogEntry *v11.DecisionLogEntry `protobuf:"bytes,4,opt,name=decision_log_entry,json=decisionLogEntry,proto3,oneof"`
}

func (*IngestBatch_Entry_AccessLogEntry) isIngestBatch_Entry_Entry() {}

func (*IngestBatch_Entry_DecisionLogEntry) isIngestBatch_Entry_Entry() {}

type IngestResponse_Backoff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration *durationpb.Duration `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *IngestResponse_Backoff) Reset() {
	*x = IngestResponse_Backoff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cerbos_cloud_logs_v1_logs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestResponse_Backoff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestResponse_Backoff) ProtoMessage() {}

func (x *IngestResponse_Backoff) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_logs_v1_logs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestResponse_Backoff.ProtoReflect.Descriptor instead.
func (*IngestResponse_Backoff) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_logs_v1_logs_proto_rawDescGZIP(), []int{2, 0}
}

func (x *IngestResponse_Backoff) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

var File_cerbos_cloud_logs_v1_logs_proto protoreflect.FileDescriptor

var file_cerbos_cloud_logs_v1_logs_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6c,
	0x6f, 0x67, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x14, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1d, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x70, 0x64, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x64, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x04, 0x0a, 0x0b,
	0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x6f, 0x67, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0b, 0xba, 0x48, 0x08, 0x92, 0x01, 0x05, 0x08, 0x01, 0x10,
	0x80, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0xc6, 0x02, 0x0a, 0x05,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x69, 0x6e, 0x64,
	0x42, 0x0a, 0xba, 0x48, 0x07, 0x82, 0x01, 0x04, 0x1a, 0x02, 0x01, 0x02, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x4b, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x51, 0x0a, 0x12, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x10, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x05, 0xba,
	0x48, 0x02, 0x08, 0x01, 0x22, 0x5f, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x4f, 0x47, 0x10, 0x02, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x64, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x05, 0x70, 0x64, 0x70, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x22, 0xda, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x48, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x48, 0x00,
	0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x1a, 0x40, 0x0a, 0x07, 0x42, 0x61, 0x63,
	0x6b, 0x6f, 0x66, 0x66, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x80, 0x01, 0x0a, 0x11, 0x43, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x4c, 0x6f, 0x67, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x1a, 0x14, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x45, 0x58, 0x50, 0x45,
	0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x62, 0x2f, 0x63, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2f,
	0x76, 0x31, 0x3b, 0x6c, 0x6f, 0x67, 0x73, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_cerbos_cloud_logs_v1_logs_proto_rawDescOnce sync.Once
	file_cerbos_cloud_logs_v1_logs_proto_rawDescData = file_cerbos_cloud_logs_v1_logs_proto_rawDesc
)

func file_cerbos_cloud_logs_v1_logs_proto_rawDescGZIP() []byte {
	file_cerbos_cloud_logs_v1_logs_proto_rawDescOnce.Do(func() {
		file_cerbos_cloud_logs_v1_logs_proto_rawDescData = protoimpl.X.CompressGZIP(file_cerbos_cloud_logs_v1_logs_proto_rawDescData)
	})
	return file_cerbos_cloud_logs_v1_logs_proto_rawDescData
}

var file_cerbos_cloud_logs_v1_logs_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cerbos_cloud_logs_v1_logs_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_cerbos_cloud_logs_v1_logs_proto_goTypes = []interface{}{
	(IngestBatch_EntryKind)(0),     // 0: cerbos.cloud.logs.v1.IngestBatch.EntryKind
	(*IngestBatch)(nil),            // 1: cerbos.cloud.logs.v1.IngestBatch
	(*IngestRequest)(nil),          // 2: cerbos.cloud.logs.v1.IngestRequest
	(*IngestResponse)(nil),         // 3: cerbos.cloud.logs.v1.IngestResponse
	(*IngestBatch_Entry)(nil),      // 4: cerbos.cloud.logs.v1.IngestBatch.Entry
	(*IngestResponse_Backoff)(nil), // 5: cerbos.cloud.logs.v1.IngestResponse.Backoff
	(*v1.Identifier)(nil),          // 6: cerbos.cloud.pdp.v1.Identifier
	(*emptypb.Empty)(nil),          // 7: google.protobuf.Empty
	(*timestamppb.Timestamp)(nil),  // 8: google.protobuf.Timestamp
	(*v11.AccessLogEntry)(nil),     // 9: cerbos.audit.v1.AccessLogEntry
	(*v11.DecisionLogEntry)(nil),   // 10: cerbos.audit.v1.DecisionLogEntry
	(*durationpb.Duration)(nil),    // 11: google.protobuf.Duration
}
var file_cerbos_cloud_logs_v1_logs_proto_depIdxs = []int32{
	4,  // 0: cerbos.cloud.logs.v1.IngestBatch.entries:type_name -> cerbos.cloud.logs.v1.IngestBatch.Entry
	6,  // 1: cerbos.cloud.logs.v1.IngestRequest.pdp_id:type_name -> cerbos.cloud.pdp.v1.Identifier
	1,  // 2: cerbos.cloud.logs.v1.IngestRequest.batch:type_name -> cerbos.cloud.logs.v1.IngestBatch
	7,  // 3: cerbos.cloud.logs.v1.IngestResponse.success:type_name -> google.protobuf.Empty
	5,  // 4: cerbos.cloud.logs.v1.IngestResponse.backoff:type_name -> cerbos.cloud.logs.v1.IngestResponse.Backoff
	0,  // 5: cerbos.cloud.logs.v1.IngestBatch.Entry.kind:type_name -> cerbos.cloud.logs.v1.IngestBatch.EntryKind
	8,  // 6: cerbos.cloud.logs.v1.IngestBatch.Entry.timestamp:type_name -> google.protobuf.Timestamp
	9,  // 7: cerbos.cloud.logs.v1.IngestBatch.Entry.access_log_entry:type_name -> cerbos.audit.v1.AccessLogEntry
	10, // 8: cerbos.cloud.logs.v1.IngestBatch.Entry.decision_log_entry:type_name -> cerbos.audit.v1.DecisionLogEntry
	11, // 9: cerbos.cloud.logs.v1.IngestResponse.Backoff.duration:type_name -> google.protobuf.Duration
	2,  // 10: cerbos.cloud.logs.v1.CerbosLogsService.Ingest:input_type -> cerbos.cloud.logs.v1.IngestRequest
	3,  // 11: cerbos.cloud.logs.v1.CerbosLogsService.Ingest:output_type -> cerbos.cloud.logs.v1.IngestResponse
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_cerbos_cloud_logs_v1_logs_proto_init() }
func file_cerbos_cloud_logs_v1_logs_proto_init() {
	if File_cerbos_cloud_logs_v1_logs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cerbos_cloud_logs_v1_logs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_cloud_logs_v1_logs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_cloud_logs_v1_logs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_cloud_logs_v1_logs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestBatch_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cerbos_cloud_logs_v1_logs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestResponse_Backoff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cerbos_cloud_logs_v1_logs_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*IngestResponse_Success)(nil),
		(*IngestResponse_Backoff_)(nil),
	}
	file_cerbos_cloud_logs_v1_logs_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*IngestBatch_Entry_AccessLogEntry)(nil),
		(*IngestBatch_Entry_DecisionLogEntry)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cerbos_cloud_logs_v1_logs_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cerbos_cloud_logs_v1_logs_proto_goTypes,
		DependencyIndexes: file_cerbos_cloud_logs_v1_logs_proto_depIdxs,
		EnumInfos:         file_cerbos_cloud_logs_v1_logs_proto_enumTypes,
		MessageInfos:      file_cerbos_cloud_logs_v1_logs_proto_msgTypes,
	}.Build()
	File_cerbos_cloud_logs_v1_logs_proto = out.File
	file_cerbos_cloud_logs_v1_logs_proto_rawDesc = nil
	file_cerbos_cloud_logs_v1_logs_proto_goTypes = nil
	file_cerbos_cloud_logs_v1_logs_proto_depIdxs = nil
}
