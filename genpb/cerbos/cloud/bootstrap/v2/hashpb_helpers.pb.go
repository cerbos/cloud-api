// Code generated by protoc-gen-go-hashpb. Do not edit.
// protoc-gen-go-hashpb v0.3.1

package bootstrapv2

import (
	v2 "github.com/cerbos/cloud-api/genpb/cerbos/cloud/bundle/v2"
	protowire "google.golang.org/protobuf/encoding/protowire"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	hash "hash"
)

func cerbos_cloud_bootstrap_v2_PDPConfig_Meta_hashpb_sum(m *PDPConfig_Meta, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.cloud.bootstrap.v2.PDPConfig.Meta.created_at"]; !ok {
		if m.GetCreatedAt() != nil {
			google_protobuf_Timestamp_hashpb_sum(m.GetCreatedAt(), hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.cloud.bootstrap.v2.PDPConfig.Meta.commit_hash"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.GetCommitHash()))

	}
}

func cerbos_cloud_bootstrap_v2_PDPConfig_hashpb_sum(m *PDPConfig, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.cloud.bootstrap.v2.PDPConfig.meta"]; !ok {
		if m.GetMeta() != nil {
			cerbos_cloud_bootstrap_v2_PDPConfig_Meta_hashpb_sum(m.GetMeta(), hasher, ignore)
		}

	}
	if _, ok := ignore["cerbos.cloud.bootstrap.v2.PDPConfig.bundle_info"]; !ok {
		if m.GetBundleInfo() != nil {
			cerbos_cloud_bundle_v2_BundleInfo_hashpb_sum(m.GetBundleInfo(), hasher, ignore)
		}

	}
}

func cerbos_cloud_bundle_v2_BundleInfo_Segment_hashpb_sum(m *v2.BundleInfo_Segment, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.cloud.bundle.v2.BundleInfo.Segment.segment_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.GetSegmentId())))

	}
	if _, ok := ignore["cerbos.cloud.bundle.v2.BundleInfo.Segment.checksum"]; !ok {
		_, _ = hasher.Write(protowire.AppendBytes(nil, m.GetChecksum()))

	}
	if _, ok := ignore["cerbos.cloud.bundle.v2.BundleInfo.Segment.download_urls"]; !ok {
		if len(m.DownloadUrls) > 0 {
			for _, v := range m.DownloadUrls {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
}

func cerbos_cloud_bundle_v2_BundleInfo_hashpb_sum(m *v2.BundleInfo, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.cloud.bundle.v2.BundleInfo.label"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.GetLabel()))

	}
	if _, ok := ignore["cerbos.cloud.bundle.v2.BundleInfo.input_hash"]; !ok {
		_, _ = hasher.Write(protowire.AppendBytes(nil, m.GetInputHash()))

	}
	if _, ok := ignore["cerbos.cloud.bundle.v2.BundleInfo.output_hash"]; !ok {
		_, _ = hasher.Write(protowire.AppendBytes(nil, m.GetOutputHash()))

	}
	if _, ok := ignore["cerbos.cloud.bundle.v2.BundleInfo.encryption_key"]; !ok {
		_, _ = hasher.Write(protowire.AppendBytes(nil, m.GetEncryptionKey()))

	}
	if _, ok := ignore["cerbos.cloud.bundle.v2.BundleInfo.segments"]; !ok {
		if len(m.Segments) > 0 {
			for _, v := range m.Segments {
				if v != nil {
					cerbos_cloud_bundle_v2_BundleInfo_Segment_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func google_protobuf_Timestamp_hashpb_sum(m *timestamppb.Timestamp, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["google.protobuf.Timestamp.seconds"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.GetSeconds())))

	}
	if _, ok := ignore["google.protobuf.Timestamp.nanos"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.GetNanos())))

	}
}
