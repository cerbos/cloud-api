// Copyright 2021-2025 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: cerbos/cloud/bundle/v2/bundle.proto

package bundlev2

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/cerbos/cloud-api/genpb/cerbos/cloud/pdp/v1"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Source struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Source:
	//
	//	*Source_DeploymentId
	//	*Source_PlaygroundId
	Source        isSource_Source `protobuf_oneof:"source"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Source) Reset() {
	*x = Source{}
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_bundle_v2_bundle_proto_rawDescGZIP(), []int{0}
}

func (x *Source) GetSource() isSource_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Source) GetDeploymentId() string {
	if x != nil {
		if x, ok := x.Source.(*Source_DeploymentId); ok {
			return x.DeploymentId
		}
	}
	return ""
}

func (x *Source) GetPlaygroundId() string {
	if x != nil {
		if x, ok := x.Source.(*Source_PlaygroundId); ok {
			return x.PlaygroundId
		}
	}
	return ""
}

type isSource_Source interface {
	isSource_Source()
}

type Source_DeploymentId struct {
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3,oneof"`
}

type Source_PlaygroundId struct {
	PlaygroundId string `protobuf:"bytes,2,opt,name=playground_id,json=playgroundId,proto3,oneof"`
}

func (*Source_DeploymentId) isSource_Source() {}

func (*Source_PlaygroundId) isSource_Source() {}

// BundleInfo holds information about a bundle and its download URLs.
type BundleInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        *Source                `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	InputHash     []byte                 `protobuf:"bytes,2,opt,name=input_hash,json=inputHash,proto3" json:"input_hash,omitempty"`
	OutputHash    []byte                 `protobuf:"bytes,3,opt,name=output_hash,json=outputHash,proto3" json:"output_hash,omitempty"`
	EncryptionKey []byte                 `protobuf:"bytes,4,opt,name=encryption_key,json=encryptionKey,proto3" json:"encryption_key,omitempty"`
	Segments      []*BundleInfo_Segment  `protobuf:"bytes,5,rep,name=segments,proto3" json:"segments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BundleInfo) Reset() {
	*x = BundleInfo{}
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BundleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleInfo) ProtoMessage() {}

func (x *BundleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleInfo.ProtoReflect.Descriptor instead.
func (*BundleInfo) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_bundle_v2_bundle_proto_rawDescGZIP(), []int{1}
}

func (x *BundleInfo) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *BundleInfo) GetInputHash() []byte {
	if x != nil {
		return x.InputHash
	}
	return nil
}

func (x *BundleInfo) GetOutputHash() []byte {
	if x != nil {
		return x.OutputHash
	}
	return nil
}

func (x *BundleInfo) GetEncryptionKey() []byte {
	if x != nil {
		return x.EncryptionKey
	}
	return nil
}

func (x *BundleInfo) GetSegments() []*BundleInfo_Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

type Meta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BundleId      string                 `protobuf:"bytes,1,opt,name=bundle_id,json=bundleId,proto3" json:"bundle_id,omitempty"`
	Source        string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Meta) Reset() {
	*x = Meta{}
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_bundle_v2_bundle_proto_rawDescGZIP(), []int{2}
}

func (x *Meta) GetBundleId() string {
	if x != nil {
		return x.BundleId
	}
	return ""
}

func (x *Meta) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type Manifest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiVersion    string                 `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	PolicyIndex   map[string]string      `protobuf:"bytes,2,rep,name=policy_index,json=policyIndex,proto3" json:"policy_index,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Schemas       []string               `protobuf:"bytes,3,rep,name=schemas,proto3" json:"schemas,omitempty"`
	Meta          *Meta                  `protobuf:"bytes,4,opt,name=meta,proto3" json:"meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Manifest) Reset() {
	*x = Manifest{}
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Manifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Manifest) ProtoMessage() {}

func (x *Manifest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Manifest.ProtoReflect.Descriptor instead.
func (*Manifest) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_bundle_v2_bundle_proto_rawDescGZIP(), []int{3}
}

func (x *Manifest) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Manifest) GetPolicyIndex() map[string]string {
	if x != nil {
		return x.PolicyIndex
	}
	return nil
}

func (x *Manifest) GetSchemas() []string {
	if x != nil {
		return x.Schemas
	}
	return nil
}

func (x *Manifest) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type GetBundleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PdpId         *v1.Identifier         `protobuf:"bytes,1,opt,name=pdp_id,json=pdpId,proto3" json:"pdp_id,omitempty"`
	Source        *Source                `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBundleRequest) Reset() {
	*x = GetBundleRequest{}
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBundleRequest) ProtoMessage() {}

func (x *GetBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBundleRequest.ProtoReflect.Descriptor instead.
func (*GetBundleRequest) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_bundle_v2_bundle_proto_rawDescGZIP(), []int{4}
}

func (x *GetBundleRequest) GetPdpId() *v1.Identifier {
	if x != nil {
		return x.PdpId
	}
	return nil
}

func (x *GetBundleRequest) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type GetBundleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BundleInfo    *BundleInfo            `protobuf:"bytes,1,opt,name=bundle_info,json=bundleInfo,proto3" json:"bundle_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBundleResponse) Reset() {
	*x = GetBundleResponse{}
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBundleResponse) ProtoMessage() {}

func (x *GetBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBundleResponse.ProtoReflect.Descriptor instead.
func (*GetBundleResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_bundle_v2_bundle_proto_rawDescGZIP(), []int{5}
}

func (x *GetBundleResponse) GetBundleInfo() *BundleInfo {
	if x != nil {
		return x.BundleInfo
	}
	return nil
}

type WatchBundleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	PdpId *v1.Identifier         `protobuf:"bytes,1,opt,name=pdp_id,json=pdpId,proto3" json:"pdp_id,omitempty"`
	// Types that are valid to be assigned to Msg:
	//
	//	*WatchBundleRequest_Start_
	//	*WatchBundleRequest_Heartbeat_
	Msg           isWatchBundleRequest_Msg `protobuf_oneof:"msg"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchBundleRequest) Reset() {
	*x = WatchBundleRequest{}
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchBundleRequest) ProtoMessage() {}

func (x *WatchBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchBundleRequest.ProtoReflect.Descriptor instead.
func (*WatchBundleRequest) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_bundle_v2_bundle_proto_rawDescGZIP(), []int{6}
}

func (x *WatchBundleRequest) GetPdpId() *v1.Identifier {
	if x != nil {
		return x.PdpId
	}
	return nil
}

func (x *WatchBundleRequest) GetMsg() isWatchBundleRequest_Msg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *WatchBundleRequest) GetStart() *WatchBundleRequest_Start {
	if x != nil {
		if x, ok := x.Msg.(*WatchBundleRequest_Start_); ok {
			return x.Start
		}
	}
	return nil
}

func (x *WatchBundleRequest) GetHeartbeat() *WatchBundleRequest_Heartbeat {
	if x != nil {
		if x, ok := x.Msg.(*WatchBundleRequest_Heartbeat_); ok {
			return x.Heartbeat
		}
	}
	return nil
}

type isWatchBundleRequest_Msg interface {
	isWatchBundleRequest_Msg()
}

type WatchBundleRequest_Start_ struct {
	Start *WatchBundleRequest_Start `protobuf:"bytes,2,opt,name=start,proto3,oneof"`
}

type WatchBundleRequest_Heartbeat_ struct {
	Heartbeat *WatchBundleRequest_Heartbeat `protobuf:"bytes,3,opt,name=heartbeat,proto3,oneof"`
}

func (*WatchBundleRequest_Start_) isWatchBundleRequest_Msg() {}

func (*WatchBundleRequest_Heartbeat_) isWatchBundleRequest_Msg() {}

type WatchBundleResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Msg:
	//
	//	*WatchBundleResponse_BundleUpdate
	//	*WatchBundleResponse_Reconnect_
	//	*WatchBundleResponse_BundleRemoved_
	Msg           isWatchBundleResponse_Msg `protobuf_oneof:"msg"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchBundleResponse) Reset() {
	*x = WatchBundleResponse{}
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchBundleResponse) ProtoMessage() {}

func (x *WatchBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchBundleResponse.ProtoReflect.Descriptor instead.
func (*WatchBundleResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_bundle_v2_bundle_proto_rawDescGZIP(), []int{7}
}

func (x *WatchBundleResponse) GetMsg() isWatchBundleResponse_Msg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *WatchBundleResponse) GetBundleUpdate() *BundleInfo {
	if x != nil {
		if x, ok := x.Msg.(*WatchBundleResponse_BundleUpdate); ok {
			return x.BundleUpdate
		}
	}
	return nil
}

func (x *WatchBundleResponse) GetReconnect() *WatchBundleResponse_Reconnect {
	if x != nil {
		if x, ok := x.Msg.(*WatchBundleResponse_Reconnect_); ok {
			return x.Reconnect
		}
	}
	return nil
}

func (x *WatchBundleResponse) GetBundleRemoved() *WatchBundleResponse_BundleRemoved {
	if x != nil {
		if x, ok := x.Msg.(*WatchBundleResponse_BundleRemoved_); ok {
			return x.BundleRemoved
		}
	}
	return nil
}

type isWatchBundleResponse_Msg interface {
	isWatchBundleResponse_Msg()
}

type WatchBundleResponse_BundleUpdate struct {
	BundleUpdate *BundleInfo `protobuf:"bytes,1,opt,name=bundle_update,json=bundleUpdate,proto3,oneof"`
}

type WatchBundleResponse_Reconnect_ struct {
	Reconnect *WatchBundleResponse_Reconnect `protobuf:"bytes,2,opt,name=reconnect,proto3,oneof"`
}

type WatchBundleResponse_BundleRemoved_ struct {
	BundleRemoved *WatchBundleResponse_BundleRemoved `protobuf:"bytes,3,opt,name=bundle_removed,json=bundleRemoved,proto3,oneof"`
}

func (*WatchBundleResponse_BundleUpdate) isWatchBundleResponse_Msg() {}

func (*WatchBundleResponse_Reconnect_) isWatchBundleResponse_Msg() {}

func (*WatchBundleResponse_BundleRemoved_) isWatchBundleResponse_Msg() {}

type BundleInfo_Segment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SegmentId     uint32                 `protobuf:"varint,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	Checksum      []byte                 `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	DownloadUrls  []string               `protobuf:"bytes,3,rep,name=download_urls,json=downloadUrls,proto3" json:"download_urls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BundleInfo_Segment) Reset() {
	*x = BundleInfo_Segment{}
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BundleInfo_Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleInfo_Segment) ProtoMessage() {}

func (x *BundleInfo_Segment) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleInfo_Segment.ProtoReflect.Descriptor instead.
func (*BundleInfo_Segment) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_bundle_v2_bundle_proto_rawDescGZIP(), []int{1, 0}
}

func (x *BundleInfo_Segment) GetSegmentId() uint32 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

func (x *BundleInfo_Segment) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *BundleInfo_Segment) GetDownloadUrls() []string {
	if x != nil {
		return x.DownloadUrls
	}
	return nil
}

type WatchBundleRequest_Start struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        *Source                `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchBundleRequest_Start) Reset() {
	*x = WatchBundleRequest_Start{}
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchBundleRequest_Start) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchBundleRequest_Start) ProtoMessage() {}

func (x *WatchBundleRequest_Start) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchBundleRequest_Start.ProtoReflect.Descriptor instead.
func (*WatchBundleRequest_Start) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_bundle_v2_bundle_proto_rawDescGZIP(), []int{6, 0}
}

func (x *WatchBundleRequest_Start) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type WatchBundleRequest_Heartbeat struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Timestamp      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ActiveBundleId string                 `protobuf:"bytes,2,opt,name=active_bundle_id,json=activeBundleId,proto3" json:"active_bundle_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WatchBundleRequest_Heartbeat) Reset() {
	*x = WatchBundleRequest_Heartbeat{}
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchBundleRequest_Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchBundleRequest_Heartbeat) ProtoMessage() {}

func (x *WatchBundleRequest_Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchBundleRequest_Heartbeat.ProtoReflect.Descriptor instead.
func (*WatchBundleRequest_Heartbeat) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_bundle_v2_bundle_proto_rawDescGZIP(), []int{6, 1}
}

func (x *WatchBundleRequest_Heartbeat) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *WatchBundleRequest_Heartbeat) GetActiveBundleId() string {
	if x != nil {
		return x.ActiveBundleId
	}
	return ""
}

type WatchBundleResponse_Reconnect struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Backoff       *durationpb.Duration   `protobuf:"bytes,1,opt,name=backoff,proto3" json:"backoff,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchBundleResponse_Reconnect) Reset() {
	*x = WatchBundleResponse_Reconnect{}
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchBundleResponse_Reconnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchBundleResponse_Reconnect) ProtoMessage() {}

func (x *WatchBundleResponse_Reconnect) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchBundleResponse_Reconnect.ProtoReflect.Descriptor instead.
func (*WatchBundleResponse_Reconnect) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_bundle_v2_bundle_proto_rawDescGZIP(), []int{7, 0}
}

func (x *WatchBundleResponse_Reconnect) GetBackoff() *durationpb.Duration {
	if x != nil {
		return x.Backoff
	}
	return nil
}

func (x *WatchBundleResponse_Reconnect) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type WatchBundleResponse_BundleRemoved struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchBundleResponse_BundleRemoved) Reset() {
	*x = WatchBundleResponse_BundleRemoved{}
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchBundleResponse_BundleRemoved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchBundleResponse_BundleRemoved) ProtoMessage() {}

func (x *WatchBundleResponse_BundleRemoved) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchBundleResponse_BundleRemoved.ProtoReflect.Descriptor instead.
func (*WatchBundleResponse_BundleRemoved) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_bundle_v2_bundle_proto_rawDescGZIP(), []int{7, 1}
}

var File_cerbos_cloud_bundle_v2_bundle_proto protoreflect.FileDescriptor

var file_cerbos_cloud_bundle_v2_bundle_proto_rawDesc = string([]byte{
	0x0a, 0x23, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x76, 0x32, 0x1a, 0x1b, 0x62,
	0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x64, 0x70, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x64, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7b, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x2f, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x98,
	0x01, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0x98, 0x01, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x64, 0x42, 0x0f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x05, 0xba,
	0x48, 0x02, 0x08, 0x01, 0x22, 0xa7, 0x03, 0x0a, 0x0a, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x07, 0xba, 0x48, 0x04, 0x7a, 0x02, 0x68, 0x20,
	0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x0b, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x7a, 0x02, 0x68, 0x20, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x08,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92,
	0x01, 0x02, 0x08, 0x01, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x8d,
	0x01, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0a, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x07, 0xba, 0x48, 0x04, 0x7a, 0x02, 0x68, 0x20, 0x52, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x35, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x10,
	0xba, 0x48, 0x0d, 0x92, 0x01, 0x0a, 0x08, 0x01, 0x18, 0x01, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x73, 0x22, 0x45,
	0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x09, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0x98, 0x01, 0x10, 0x52, 0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x8d, 0x02, 0x0a, 0x08, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e,
	0x76, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x1a, 0x3e, 0x0a, 0x10, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x64,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x64, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x05, 0x70, 0x64, 0x70, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x60, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4b, 0x0a, 0x0b, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x0a, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xcf, 0x03, 0x0a,
	0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x64, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x64, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x70, 0x64,
	0x70, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x54, 0x0a,
	0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x1a, 0x47, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3e, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x88, 0x01, 0x0a,
	0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0d, 0xba, 0x48, 0x0a, 0xc8, 0x01,
	0x01, 0xb2, 0x01, 0x04, 0x4a, 0x02, 0x08, 0x3c, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0x98, 0x01, 0x10, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x94,
	0x03, 0x0a, 0x13, 0x57, 0x61, 0x74, 0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x55, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x62, 0x0a, 0x0e, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x1a, 0x58, 0x0a, 0x09,
	0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x62, 0x61, 0x63,
	0x6b, 0x6f, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0x0f, 0x0a, 0x0d, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x05,
	0xba, 0x48, 0x02, 0x08, 0x01, 0x32, 0xfd, 0x01, 0x0a, 0x13, 0x43, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x63, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6c, 0x0a, 0x0b, 0x57, 0x61, 0x74, 0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x2a, 0x2e, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x1a,
	0x14, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d,
	0x45, 0x4e, 0x54, 0x41, 0x4c, 0x42, 0x43, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x62, 0x2f, 0x63, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f, 0x76,
	0x32, 0x3b, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_cerbos_cloud_bundle_v2_bundle_proto_rawDescOnce sync.Once
	file_cerbos_cloud_bundle_v2_bundle_proto_rawDescData []byte
)

func file_cerbos_cloud_bundle_v2_bundle_proto_rawDescGZIP() []byte {
	file_cerbos_cloud_bundle_v2_bundle_proto_rawDescOnce.Do(func() {
		file_cerbos_cloud_bundle_v2_bundle_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cerbos_cloud_bundle_v2_bundle_proto_rawDesc), len(file_cerbos_cloud_bundle_v2_bundle_proto_rawDesc)))
	})
	return file_cerbos_cloud_bundle_v2_bundle_proto_rawDescData
}

var file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_cerbos_cloud_bundle_v2_bundle_proto_goTypes = []any{
	(*Source)(nil),                            // 0: cerbos.cloud.bundle.v2.Source
	(*BundleInfo)(nil),                        // 1: cerbos.cloud.bundle.v2.BundleInfo
	(*Meta)(nil),                              // 2: cerbos.cloud.bundle.v2.Meta
	(*Manifest)(nil),                          // 3: cerbos.cloud.bundle.v2.Manifest
	(*GetBundleRequest)(nil),                  // 4: cerbos.cloud.bundle.v2.GetBundleRequest
	(*GetBundleResponse)(nil),                 // 5: cerbos.cloud.bundle.v2.GetBundleResponse
	(*WatchBundleRequest)(nil),                // 6: cerbos.cloud.bundle.v2.WatchBundleRequest
	(*WatchBundleResponse)(nil),               // 7: cerbos.cloud.bundle.v2.WatchBundleResponse
	(*BundleInfo_Segment)(nil),                // 8: cerbos.cloud.bundle.v2.BundleInfo.Segment
	nil,                                       // 9: cerbos.cloud.bundle.v2.Manifest.PolicyIndexEntry
	(*WatchBundleRequest_Start)(nil),          // 10: cerbos.cloud.bundle.v2.WatchBundleRequest.Start
	(*WatchBundleRequest_Heartbeat)(nil),      // 11: cerbos.cloud.bundle.v2.WatchBundleRequest.Heartbeat
	(*WatchBundleResponse_Reconnect)(nil),     // 12: cerbos.cloud.bundle.v2.WatchBundleResponse.Reconnect
	(*WatchBundleResponse_BundleRemoved)(nil), // 13: cerbos.cloud.bundle.v2.WatchBundleResponse.BundleRemoved
	(*v1.Identifier)(nil),                     // 14: cerbos.cloud.pdp.v1.Identifier
	(*timestamppb.Timestamp)(nil),             // 15: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),               // 16: google.protobuf.Duration
}
var file_cerbos_cloud_bundle_v2_bundle_proto_depIdxs = []int32{
	0,  // 0: cerbos.cloud.bundle.v2.BundleInfo.source:type_name -> cerbos.cloud.bundle.v2.Source
	8,  // 1: cerbos.cloud.bundle.v2.BundleInfo.segments:type_name -> cerbos.cloud.bundle.v2.BundleInfo.Segment
	9,  // 2: cerbos.cloud.bundle.v2.Manifest.policy_index:type_name -> cerbos.cloud.bundle.v2.Manifest.PolicyIndexEntry
	2,  // 3: cerbos.cloud.bundle.v2.Manifest.meta:type_name -> cerbos.cloud.bundle.v2.Meta
	14, // 4: cerbos.cloud.bundle.v2.GetBundleRequest.pdp_id:type_name -> cerbos.cloud.pdp.v1.Identifier
	0,  // 5: cerbos.cloud.bundle.v2.GetBundleRequest.source:type_name -> cerbos.cloud.bundle.v2.Source
	1,  // 6: cerbos.cloud.bundle.v2.GetBundleResponse.bundle_info:type_name -> cerbos.cloud.bundle.v2.BundleInfo
	14, // 7: cerbos.cloud.bundle.v2.WatchBundleRequest.pdp_id:type_name -> cerbos.cloud.pdp.v1.Identifier
	10, // 8: cerbos.cloud.bundle.v2.WatchBundleRequest.start:type_name -> cerbos.cloud.bundle.v2.WatchBundleRequest.Start
	11, // 9: cerbos.cloud.bundle.v2.WatchBundleRequest.heartbeat:type_name -> cerbos.cloud.bundle.v2.WatchBundleRequest.Heartbeat
	1,  // 10: cerbos.cloud.bundle.v2.WatchBundleResponse.bundle_update:type_name -> cerbos.cloud.bundle.v2.BundleInfo
	12, // 11: cerbos.cloud.bundle.v2.WatchBundleResponse.reconnect:type_name -> cerbos.cloud.bundle.v2.WatchBundleResponse.Reconnect
	13, // 12: cerbos.cloud.bundle.v2.WatchBundleResponse.bundle_removed:type_name -> cerbos.cloud.bundle.v2.WatchBundleResponse.BundleRemoved
	0,  // 13: cerbos.cloud.bundle.v2.WatchBundleRequest.Start.source:type_name -> cerbos.cloud.bundle.v2.Source
	15, // 14: cerbos.cloud.bundle.v2.WatchBundleRequest.Heartbeat.timestamp:type_name -> google.protobuf.Timestamp
	16, // 15: cerbos.cloud.bundle.v2.WatchBundleResponse.Reconnect.backoff:type_name -> google.protobuf.Duration
	4,  // 16: cerbos.cloud.bundle.v2.CerbosBundleService.GetBundle:input_type -> cerbos.cloud.bundle.v2.GetBundleRequest
	6,  // 17: cerbos.cloud.bundle.v2.CerbosBundleService.WatchBundle:input_type -> cerbos.cloud.bundle.v2.WatchBundleRequest
	5,  // 18: cerbos.cloud.bundle.v2.CerbosBundleService.GetBundle:output_type -> cerbos.cloud.bundle.v2.GetBundleResponse
	7,  // 19: cerbos.cloud.bundle.v2.CerbosBundleService.WatchBundle:output_type -> cerbos.cloud.bundle.v2.WatchBundleResponse
	18, // [18:20] is the sub-list for method output_type
	16, // [16:18] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_cerbos_cloud_bundle_v2_bundle_proto_init() }
func file_cerbos_cloud_bundle_v2_bundle_proto_init() {
	if File_cerbos_cloud_bundle_v2_bundle_proto != nil {
		return
	}
	file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[0].OneofWrappers = []any{
		(*Source_DeploymentId)(nil),
		(*Source_PlaygroundId)(nil),
	}
	file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[6].OneofWrappers = []any{
		(*WatchBundleRequest_Start_)(nil),
		(*WatchBundleRequest_Heartbeat_)(nil),
	}
	file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes[7].OneofWrappers = []any{
		(*WatchBundleResponse_BundleUpdate)(nil),
		(*WatchBundleResponse_Reconnect_)(nil),
		(*WatchBundleResponse_BundleRemoved_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cerbos_cloud_bundle_v2_bundle_proto_rawDesc), len(file_cerbos_cloud_bundle_v2_bundle_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cerbos_cloud_bundle_v2_bundle_proto_goTypes,
		DependencyIndexes: file_cerbos_cloud_bundle_v2_bundle_proto_depIdxs,
		MessageInfos:      file_cerbos_cloud_bundle_v2_bundle_proto_msgTypes,
	}.Build()
	File_cerbos_cloud_bundle_v2_bundle_proto = out.File
	file_cerbos_cloud_bundle_v2_bundle_proto_goTypes = nil
	file_cerbos_cloud_bundle_v2_bundle_proto_depIdxs = nil
}
