// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cerbos/cloud/bundle/v1/bundle.proto

package bundlev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BundleInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BundleInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BundleInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BundleInfoMultiError, or
// nil if none found.
func (m *BundleInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *BundleInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetLabel()) < 1 {
		err := BundleInfoValidationError{
			field:  "Label",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetBundleHash()) != 32 {
		err := BundleInfoValidationError{
			field:  "BundleHash",
			reason: "value length must be 32 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetSegments()) < 1 {
		err := BundleInfoValidationError{
			field:  "Segments",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetSegments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BundleInfoValidationError{
						field:  fmt.Sprintf("Segments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BundleInfoValidationError{
						field:  fmt.Sprintf("Segments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BundleInfoValidationError{
					field:  fmt.Sprintf("Segments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BundleInfoMultiError(errors)
	}

	return nil
}

// BundleInfoMultiError is an error wrapping multiple validation errors
// returned by BundleInfo.ValidateAll() if the designated constraints aren't met.
type BundleInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BundleInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BundleInfoMultiError) AllErrors() []error { return m }

// BundleInfoValidationError is the validation error returned by
// BundleInfo.Validate if the designated constraints aren't met.
type BundleInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BundleInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BundleInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BundleInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BundleInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BundleInfoValidationError) ErrorName() string { return "BundleInfoValidationError" }

// Error satisfies the builtin error interface
func (e BundleInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBundleInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BundleInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BundleInfoValidationError{}

// Validate checks the field values on Meta with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Meta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Meta with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MetaMultiError, or nil if none found.
func (m *Meta) ValidateAll() error {
	return m.validate(true)
}

func (m *Meta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Identifier

	// no validation rules for Source

	if len(errors) > 0 {
		return MetaMultiError(errors)
	}

	return nil
}

// MetaMultiError is an error wrapping multiple validation errors returned by
// Meta.ValidateAll() if the designated constraints aren't met.
type MetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetaMultiError) AllErrors() []error { return m }

// MetaValidationError is the validation error returned by Meta.Validate if the
// designated constraints aren't met.
type MetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetaValidationError) ErrorName() string { return "MetaValidationError" }

// Error satisfies the builtin error interface
func (e MetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetaValidationError{}

// Validate checks the field values on Manifest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Manifest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Manifest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ManifestMultiError, or nil
// if none found.
func (m *Manifest) ValidateAll() error {
	return m.validate(true)
}

func (m *Manifest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApiVersion

	// no validation rules for PolicyIndex

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ManifestValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ManifestValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ManifestValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ManifestMultiError(errors)
	}

	return nil
}

// ManifestMultiError is an error wrapping multiple validation errors returned
// by Manifest.ValidateAll() if the designated constraints aren't met.
type ManifestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManifestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManifestMultiError) AllErrors() []error { return m }

// ManifestValidationError is the validation error returned by
// Manifest.Validate if the designated constraints aren't met.
type ManifestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManifestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManifestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManifestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManifestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManifestValidationError) ErrorName() string { return "ManifestValidationError" }

// Error satisfies the builtin error interface
func (e ManifestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManifest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManifestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManifestValidationError{}

// Validate checks the field values on GetBundleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBundleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBundleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBundleRequestMultiError, or nil if none found.
func (m *GetBundleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBundleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPdpId() == nil {
		err := GetBundleRequestValidationError{
			field:  "PdpId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPdpId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBundleRequestValidationError{
					field:  "PdpId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBundleRequestValidationError{
					field:  "PdpId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPdpId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBundleRequestValidationError{
				field:  "PdpId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetBundleLabel()) < 1 {
		err := GetBundleRequestValidationError{
			field:  "BundleLabel",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBundleRequestMultiError(errors)
	}

	return nil
}

// GetBundleRequestMultiError is an error wrapping multiple validation errors
// returned by GetBundleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBundleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBundleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBundleRequestMultiError) AllErrors() []error { return m }

// GetBundleRequestValidationError is the validation error returned by
// GetBundleRequest.Validate if the designated constraints aren't met.
type GetBundleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBundleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBundleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBundleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBundleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBundleRequestValidationError) ErrorName() string { return "GetBundleRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBundleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBundleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBundleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBundleRequestValidationError{}

// Validate checks the field values on GetBundleResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBundleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBundleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBundleResponseMultiError, or nil if none found.
func (m *GetBundleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBundleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBundleInfo() == nil {
		err := GetBundleResponseValidationError{
			field:  "BundleInfo",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBundleInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBundleResponseValidationError{
					field:  "BundleInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBundleResponseValidationError{
					field:  "BundleInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBundleInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBundleResponseValidationError{
				field:  "BundleInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBundleResponseMultiError(errors)
	}

	return nil
}

// GetBundleResponseMultiError is an error wrapping multiple validation errors
// returned by GetBundleResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBundleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBundleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBundleResponseMultiError) AllErrors() []error { return m }

// GetBundleResponseValidationError is the validation error returned by
// GetBundleResponse.Validate if the designated constraints aren't met.
type GetBundleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBundleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBundleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBundleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBundleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBundleResponseValidationError) ErrorName() string {
	return "GetBundleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBundleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBundleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBundleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBundleResponseValidationError{}

// Validate checks the field values on WatchBundleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchBundleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchBundleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchBundleRequestMultiError, or nil if none found.
func (m *WatchBundleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchBundleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPdpId() == nil {
		err := WatchBundleRequestValidationError{
			field:  "PdpId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPdpId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchBundleRequestValidationError{
					field:  "PdpId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchBundleRequestValidationError{
					field:  "PdpId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPdpId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchBundleRequestValidationError{
				field:  "PdpId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Msg.(type) {
	case *WatchBundleRequest_WatchLabel_:
		if v == nil {
			err := WatchBundleRequestValidationError{
				field:  "Msg",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWatchLabel()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WatchBundleRequestValidationError{
						field:  "WatchLabel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WatchBundleRequestValidationError{
						field:  "WatchLabel",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWatchLabel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchBundleRequestValidationError{
					field:  "WatchLabel",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WatchBundleRequest_Heartbeat_:
		if v == nil {
			err := WatchBundleRequestValidationError{
				field:  "Msg",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHeartbeat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WatchBundleRequestValidationError{
						field:  "Heartbeat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WatchBundleRequestValidationError{
						field:  "Heartbeat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHeartbeat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchBundleRequestValidationError{
					field:  "Heartbeat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return WatchBundleRequestMultiError(errors)
	}

	return nil
}

// WatchBundleRequestMultiError is an error wrapping multiple validation errors
// returned by WatchBundleRequest.ValidateAll() if the designated constraints
// aren't met.
type WatchBundleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchBundleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchBundleRequestMultiError) AllErrors() []error { return m }

// WatchBundleRequestValidationError is the validation error returned by
// WatchBundleRequest.Validate if the designated constraints aren't met.
type WatchBundleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchBundleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchBundleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchBundleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchBundleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchBundleRequestValidationError) ErrorName() string {
	return "WatchBundleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchBundleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchBundleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchBundleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchBundleRequestValidationError{}

// Validate checks the field values on WatchBundleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchBundleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchBundleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchBundleResponseMultiError, or nil if none found.
func (m *WatchBundleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchBundleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofMsgPresent := false
	switch v := m.Msg.(type) {
	case *WatchBundleResponse_BundleUpdate:
		if v == nil {
			err := WatchBundleResponseValidationError{
				field:  "Msg",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofMsgPresent = true

		if all {
			switch v := interface{}(m.GetBundleUpdate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WatchBundleResponseValidationError{
						field:  "BundleUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WatchBundleResponseValidationError{
						field:  "BundleUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBundleUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchBundleResponseValidationError{
					field:  "BundleUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WatchBundleResponse_Reconnect_:
		if v == nil {
			err := WatchBundleResponseValidationError{
				field:  "Msg",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofMsgPresent = true

		if all {
			switch v := interface{}(m.GetReconnect()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WatchBundleResponseValidationError{
						field:  "Reconnect",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WatchBundleResponseValidationError{
						field:  "Reconnect",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReconnect()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchBundleResponseValidationError{
					field:  "Reconnect",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WatchBundleResponse_BundleRemoved_:
		if v == nil {
			err := WatchBundleResponseValidationError{
				field:  "Msg",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofMsgPresent = true

		if all {
			switch v := interface{}(m.GetBundleRemoved()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WatchBundleResponseValidationError{
						field:  "BundleRemoved",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WatchBundleResponseValidationError{
						field:  "BundleRemoved",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBundleRemoved()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchBundleResponseValidationError{
					field:  "BundleRemoved",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofMsgPresent {
		err := WatchBundleResponseValidationError{
			field:  "Msg",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return WatchBundleResponseMultiError(errors)
	}

	return nil
}

// WatchBundleResponseMultiError is an error wrapping multiple validation
// errors returned by WatchBundleResponse.ValidateAll() if the designated
// constraints aren't met.
type WatchBundleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchBundleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchBundleResponseMultiError) AllErrors() []error { return m }

// WatchBundleResponseValidationError is the validation error returned by
// WatchBundleResponse.Validate if the designated constraints aren't met.
type WatchBundleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchBundleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchBundleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchBundleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchBundleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchBundleResponseValidationError) ErrorName() string {
	return "WatchBundleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchBundleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchBundleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchBundleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchBundleResponseValidationError{}

// Validate checks the field values on BundleInfo_Segment with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BundleInfo_Segment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BundleInfo_Segment with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BundleInfo_SegmentMultiError, or nil if none found.
func (m *BundleInfo_Segment) ValidateAll() error {
	return m.validate(true)
}

func (m *BundleInfo_Segment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSegmentId() <= 0 {
		err := BundleInfo_SegmentValidationError{
			field:  "SegmentId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetChecksum()) != 32 {
		err := BundleInfo_SegmentValidationError{
			field:  "Checksum",
			reason: "value length must be 32 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetDownloadUrls()) < 1 {
		err := BundleInfo_SegmentValidationError{
			field:  "DownloadUrls",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_BundleInfo_Segment_DownloadUrls_Unique := make(map[string]struct{}, len(m.GetDownloadUrls()))

	for idx, item := range m.GetDownloadUrls() {
		_, _ = idx, item

		if _, exists := _BundleInfo_Segment_DownloadUrls_Unique[item]; exists {
			err := BundleInfo_SegmentValidationError{
				field:  fmt.Sprintf("DownloadUrls[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_BundleInfo_Segment_DownloadUrls_Unique[item] = struct{}{}
		}

		if utf8.RuneCountInString(item) < 1 {
			err := BundleInfo_SegmentValidationError{
				field:  fmt.Sprintf("DownloadUrls[%v]", idx),
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return BundleInfo_SegmentMultiError(errors)
	}

	return nil
}

// BundleInfo_SegmentMultiError is an error wrapping multiple validation errors
// returned by BundleInfo_Segment.ValidateAll() if the designated constraints
// aren't met.
type BundleInfo_SegmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BundleInfo_SegmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BundleInfo_SegmentMultiError) AllErrors() []error { return m }

// BundleInfo_SegmentValidationError is the validation error returned by
// BundleInfo_Segment.Validate if the designated constraints aren't met.
type BundleInfo_SegmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BundleInfo_SegmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BundleInfo_SegmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BundleInfo_SegmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BundleInfo_SegmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BundleInfo_SegmentValidationError) ErrorName() string {
	return "BundleInfo_SegmentValidationError"
}

// Error satisfies the builtin error interface
func (e BundleInfo_SegmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBundleInfo_Segment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BundleInfo_SegmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BundleInfo_SegmentValidationError{}

// Validate checks the field values on WatchBundleRequest_WatchLabel with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchBundleRequest_WatchLabel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchBundleRequest_WatchLabel with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WatchBundleRequest_WatchLabelMultiError, or nil if none found.
func (m *WatchBundleRequest_WatchLabel) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchBundleRequest_WatchLabel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetBundleLabel()) < 1 {
		err := WatchBundleRequest_WatchLabelValidationError{
			field:  "BundleLabel",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return WatchBundleRequest_WatchLabelMultiError(errors)
	}

	return nil
}

// WatchBundleRequest_WatchLabelMultiError is an error wrapping multiple
// validation errors returned by WatchBundleRequest_WatchLabel.ValidateAll()
// if the designated constraints aren't met.
type WatchBundleRequest_WatchLabelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchBundleRequest_WatchLabelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchBundleRequest_WatchLabelMultiError) AllErrors() []error { return m }

// WatchBundleRequest_WatchLabelValidationError is the validation error
// returned by WatchBundleRequest_WatchLabel.Validate if the designated
// constraints aren't met.
type WatchBundleRequest_WatchLabelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchBundleRequest_WatchLabelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchBundleRequest_WatchLabelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchBundleRequest_WatchLabelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchBundleRequest_WatchLabelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchBundleRequest_WatchLabelValidationError) ErrorName() string {
	return "WatchBundleRequest_WatchLabelValidationError"
}

// Error satisfies the builtin error interface
func (e WatchBundleRequest_WatchLabelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchBundleRequest_WatchLabel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchBundleRequest_WatchLabelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchBundleRequest_WatchLabelValidationError{}

// Validate checks the field values on WatchBundleRequest_Heartbeat with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchBundleRequest_Heartbeat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchBundleRequest_Heartbeat with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchBundleRequest_HeartbeatMultiError, or nil if none found.
func (m *WatchBundleRequest_Heartbeat) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchBundleRequest_Heartbeat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTimestamp() == nil {
		err := WatchBundleRequest_HeartbeatValidationError{
			field:  "Timestamp",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if t := m.GetTimestamp(); t != nil {
		ts, err := t.AsTime(), t.CheckValid()
		if err != nil {
			err = WatchBundleRequest_HeartbeatValidationError{
				field:  "Timestamp",
				reason: "value is not a valid timestamp",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			now := time.Now()
			within := time.Duration(60*time.Second + 0*time.Nanosecond)

			if ts.Sub(now.Add(within)) >= 0 || ts.Sub(now.Add(-within)) <= 0 {
				err := WatchBundleRequest_HeartbeatValidationError{
					field:  "Timestamp",
					reason: "value must be within 1m0s of now",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if utf8.RuneCountInString(m.GetActiveBundleId()) < 1 {
		err := WatchBundleRequest_HeartbeatValidationError{
			field:  "ActiveBundleId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return WatchBundleRequest_HeartbeatMultiError(errors)
	}

	return nil
}

// WatchBundleRequest_HeartbeatMultiError is an error wrapping multiple
// validation errors returned by WatchBundleRequest_Heartbeat.ValidateAll() if
// the designated constraints aren't met.
type WatchBundleRequest_HeartbeatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchBundleRequest_HeartbeatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchBundleRequest_HeartbeatMultiError) AllErrors() []error { return m }

// WatchBundleRequest_HeartbeatValidationError is the validation error returned
// by WatchBundleRequest_Heartbeat.Validate if the designated constraints
// aren't met.
type WatchBundleRequest_HeartbeatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchBundleRequest_HeartbeatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchBundleRequest_HeartbeatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchBundleRequest_HeartbeatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchBundleRequest_HeartbeatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchBundleRequest_HeartbeatValidationError) ErrorName() string {
	return "WatchBundleRequest_HeartbeatValidationError"
}

// Error satisfies the builtin error interface
func (e WatchBundleRequest_HeartbeatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchBundleRequest_Heartbeat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchBundleRequest_HeartbeatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchBundleRequest_HeartbeatValidationError{}

// Validate checks the field values on WatchBundleResponse_Reconnect with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchBundleResponse_Reconnect) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchBundleResponse_Reconnect with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WatchBundleResponse_ReconnectMultiError, or nil if none found.
func (m *WatchBundleResponse_Reconnect) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchBundleResponse_Reconnect) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBackoff()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchBundleResponse_ReconnectValidationError{
					field:  "Backoff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchBundleResponse_ReconnectValidationError{
					field:  "Backoff",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBackoff()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchBundleResponse_ReconnectValidationError{
				field:  "Backoff",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Reason

	if len(errors) > 0 {
		return WatchBundleResponse_ReconnectMultiError(errors)
	}

	return nil
}

// WatchBundleResponse_ReconnectMultiError is an error wrapping multiple
// validation errors returned by WatchBundleResponse_Reconnect.ValidateAll()
// if the designated constraints aren't met.
type WatchBundleResponse_ReconnectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchBundleResponse_ReconnectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchBundleResponse_ReconnectMultiError) AllErrors() []error { return m }

// WatchBundleResponse_ReconnectValidationError is the validation error
// returned by WatchBundleResponse_Reconnect.Validate if the designated
// constraints aren't met.
type WatchBundleResponse_ReconnectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchBundleResponse_ReconnectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchBundleResponse_ReconnectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchBundleResponse_ReconnectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchBundleResponse_ReconnectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchBundleResponse_ReconnectValidationError) ErrorName() string {
	return "WatchBundleResponse_ReconnectValidationError"
}

// Error satisfies the builtin error interface
func (e WatchBundleResponse_ReconnectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchBundleResponse_Reconnect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchBundleResponse_ReconnectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchBundleResponse_ReconnectValidationError{}

// Validate checks the field values on WatchBundleResponse_BundleRemoved with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *WatchBundleResponse_BundleRemoved) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchBundleResponse_BundleRemoved
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// WatchBundleResponse_BundleRemovedMultiError, or nil if none found.
func (m *WatchBundleResponse_BundleRemoved) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchBundleResponse_BundleRemoved) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return WatchBundleResponse_BundleRemovedMultiError(errors)
	}

	return nil
}

// WatchBundleResponse_BundleRemovedMultiError is an error wrapping multiple
// validation errors returned by
// WatchBundleResponse_BundleRemoved.ValidateAll() if the designated
// constraints aren't met.
type WatchBundleResponse_BundleRemovedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchBundleResponse_BundleRemovedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchBundleResponse_BundleRemovedMultiError) AllErrors() []error { return m }

// WatchBundleResponse_BundleRemovedValidationError is the validation error
// returned by WatchBundleResponse_BundleRemoved.Validate if the designated
// constraints aren't met.
type WatchBundleResponse_BundleRemovedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchBundleResponse_BundleRemovedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchBundleResponse_BundleRemovedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchBundleResponse_BundleRemovedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchBundleResponse_BundleRemovedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchBundleResponse_BundleRemovedValidationError) ErrorName() string {
	return "WatchBundleResponse_BundleRemovedValidationError"
}

// Error satisfies the builtin error interface
func (e WatchBundleResponse_BundleRemovedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchBundleResponse_BundleRemoved.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchBundleResponse_BundleRemovedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchBundleResponse_BundleRemovedValidationError{}
