// Code generated by protoc-gen-go-hashpb. DO NOT EDIT.
// protoc-gen-go-hashpb v0.4.2

package bundlev1

import (
	v1 "github.com/cerbos/cloud-api/genpb/cerbos/cloud/pdp/v1"
	protowire "google.golang.org/protobuf/encoding/protowire"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	hash "hash"
	maps "maps"
	slices "slices"
	unsafe "unsafe"
)

func cerbos_cloud_bundle_v1_BundleInfo_Segment_hashpb_sum(m *BundleInfo_Segment, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.cloud.bundle.v1.BundleInfo.Segment.segment_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.GetSegmentId())))
	}
	if _, ok := ignore["cerbos.cloud.bundle.v1.BundleInfo.Segment.checksum"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(m.GetChecksum()))))
		_, _ = hasher.Write(m.GetChecksum())
	}
	if _, ok := ignore["cerbos.cloud.bundle.v1.BundleInfo.Segment.download_urls"]; !ok {
		if len(m.DownloadUrls) > 0 {
			for _, v := range m.DownloadUrls {
				_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(v))))
				_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(v), len(v)))
			}
		}
	}
}

func cerbos_cloud_bundle_v1_BundleInfo_hashpb_sum(m *BundleInfo, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.cloud.bundle.v1.BundleInfo.label"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(m.GetLabel()))))
		_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(m.GetLabel()), len(m.GetLabel())))
	}
	if _, ok := ignore["cerbos.cloud.bundle.v1.BundleInfo.bundle_hash"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(m.GetBundleHash()))))
		_, _ = hasher.Write(m.GetBundleHash())
	}
	if _, ok := ignore["cerbos.cloud.bundle.v1.BundleInfo.segments"]; !ok {
		if len(m.Segments) > 0 {
			for _, v := range m.Segments {
				if v != nil {
					cerbos_cloud_bundle_v1_BundleInfo_Segment_hashpb_sum(v, hasher, ignore)
				}
			}
		}
	}
}

func cerbos_cloud_bundle_v1_GetBundleRequest_hashpb_sum(m *GetBundleRequest, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.cloud.bundle.v1.GetBundleRequest.pdp_id"]; !ok {
		if m.GetPdpId() != nil {
			cerbos_cloud_pdp_v1_Identifier_hashpb_sum(m.GetPdpId(), hasher, ignore)
		}
	}
	if _, ok := ignore["cerbos.cloud.bundle.v1.GetBundleRequest.bundle_label"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(m.GetBundleLabel()))))
		_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(m.GetBundleLabel()), len(m.GetBundleLabel())))
	}
}

func cerbos_cloud_bundle_v1_GetBundleResponse_hashpb_sum(m *GetBundleResponse, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.cloud.bundle.v1.GetBundleResponse.bundle_info"]; !ok {
		if m.GetBundleInfo() != nil {
			cerbos_cloud_bundle_v1_BundleInfo_hashpb_sum(m.GetBundleInfo(), hasher, ignore)
		}
	}
}

func cerbos_cloud_bundle_v1_Manifest_hashpb_sum(m *Manifest, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.cloud.bundle.v1.Manifest.api_version"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(m.GetApiVersion()))))
		_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(m.GetApiVersion()), len(m.GetApiVersion())))
	}
	if _, ok := ignore["cerbos.cloud.bundle.v1.Manifest.policy_index"]; !ok {
		if len(m.PolicyIndex) > 0 {
			for _, k := range slices.Sorted(maps.Keys(m.PolicyIndex)) {
				_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(k))))
				_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(k), len(k)))
				_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(m.PolicyIndex[k]))))
				_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(m.PolicyIndex[k]), len(m.PolicyIndex[k])))
			}
		}
	}
	if _, ok := ignore["cerbos.cloud.bundle.v1.Manifest.schemas"]; !ok {
		if len(m.Schemas) > 0 {
			for _, v := range m.Schemas {
				_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(v))))
				_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(v), len(v)))
			}
		}
	}
	if _, ok := ignore["cerbos.cloud.bundle.v1.Manifest.meta"]; !ok {
		if m.GetMeta() != nil {
			cerbos_cloud_bundle_v1_Meta_hashpb_sum(m.GetMeta(), hasher, ignore)
		}
	}
}

func cerbos_cloud_bundle_v1_Meta_hashpb_sum(m *Meta, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.cloud.bundle.v1.Meta.identifier"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(m.GetIdentifier()))))
		_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(m.GetIdentifier()), len(m.GetIdentifier())))
	}
	if _, ok := ignore["cerbos.cloud.bundle.v1.Meta.source"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(m.GetSource()))))
		_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(m.GetSource()), len(m.GetSource())))
	}
}

func cerbos_cloud_bundle_v1_WatchBundleRequest_Heartbeat_hashpb_sum(m *WatchBundleRequest_Heartbeat, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.cloud.bundle.v1.WatchBundleRequest.Heartbeat.timestamp"]; !ok {
		if m.GetTimestamp() != nil {
			google_protobuf_Timestamp_hashpb_sum(m.GetTimestamp(), hasher, ignore)
		}
	}
	if _, ok := ignore["cerbos.cloud.bundle.v1.WatchBundleRequest.Heartbeat.active_bundle_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(m.GetActiveBundleId()))))
		_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(m.GetActiveBundleId()), len(m.GetActiveBundleId())))
	}
}

func cerbos_cloud_bundle_v1_WatchBundleRequest_WatchLabel_hashpb_sum(m *WatchBundleRequest_WatchLabel, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.cloud.bundle.v1.WatchBundleRequest.WatchLabel.bundle_label"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(m.GetBundleLabel()))))
		_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(m.GetBundleLabel()), len(m.GetBundleLabel())))
	}
}

func cerbos_cloud_bundle_v1_WatchBundleRequest_hashpb_sum(m *WatchBundleRequest, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.cloud.bundle.v1.WatchBundleRequest.pdp_id"]; !ok {
		if m.GetPdpId() != nil {
			cerbos_cloud_pdp_v1_Identifier_hashpb_sum(m.GetPdpId(), hasher, ignore)
		}
	}
	if m.Msg != nil {
		if _, ok := ignore["cerbos.cloud.bundle.v1.WatchBundleRequest.msg"]; !ok {
			switch t := m.Msg.(type) {
			case *WatchBundleRequest_WatchLabel_:
				if t.WatchLabel != nil {
					cerbos_cloud_bundle_v1_WatchBundleRequest_WatchLabel_hashpb_sum(t.WatchLabel, hasher, ignore)
				}
			case *WatchBundleRequest_Heartbeat_:
				if t.Heartbeat != nil {
					cerbos_cloud_bundle_v1_WatchBundleRequest_Heartbeat_hashpb_sum(t.Heartbeat, hasher, ignore)
				}
			}
		}
	}
}

func cerbos_cloud_bundle_v1_WatchBundleResponse_BundleRemoved_hashpb_sum(m *WatchBundleResponse_BundleRemoved, hasher hash.Hash, ignore map[string]struct{}) {
}

func cerbos_cloud_bundle_v1_WatchBundleResponse_Reconnect_hashpb_sum(m *WatchBundleResponse_Reconnect, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.cloud.bundle.v1.WatchBundleResponse.Reconnect.backoff"]; !ok {
		if m.GetBackoff() != nil {
			google_protobuf_Duration_hashpb_sum(m.GetBackoff(), hasher, ignore)
		}
	}
	if _, ok := ignore["cerbos.cloud.bundle.v1.WatchBundleResponse.Reconnect.reason"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(m.GetReason()))))
		_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(m.GetReason()), len(m.GetReason())))
	}
}

func cerbos_cloud_bundle_v1_WatchBundleResponse_hashpb_sum(m *WatchBundleResponse, hasher hash.Hash, ignore map[string]struct{}) {
	if m.Msg != nil {
		if _, ok := ignore["cerbos.cloud.bundle.v1.WatchBundleResponse.msg"]; !ok {
			switch t := m.Msg.(type) {
			case *WatchBundleResponse_BundleUpdate:
				if t.BundleUpdate != nil {
					cerbos_cloud_bundle_v1_BundleInfo_hashpb_sum(t.BundleUpdate, hasher, ignore)
				}
			case *WatchBundleResponse_Reconnect_:
				if t.Reconnect != nil {
					cerbos_cloud_bundle_v1_WatchBundleResponse_Reconnect_hashpb_sum(t.Reconnect, hasher, ignore)
				}
			case *WatchBundleResponse_BundleRemoved_:
				if t.BundleRemoved != nil {
					cerbos_cloud_bundle_v1_WatchBundleResponse_BundleRemoved_hashpb_sum(t.BundleRemoved, hasher, ignore)
				}
			}
		}
	}
}

func cerbos_cloud_pdp_v1_Identifier_hashpb_sum(m *v1.Identifier, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["cerbos.cloud.pdp.v1.Identifier.instance"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(m.GetInstance()))))
		_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(m.GetInstance()), len(m.GetInstance())))
	}
	if _, ok := ignore["cerbos.cloud.pdp.v1.Identifier.version"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(len(m.GetVersion()))))
		_, _ = hasher.Write(unsafe.Slice(unsafe.StringData(m.GetVersion()), len(m.GetVersion())))
	}
}

func google_protobuf_Duration_hashpb_sum(m *durationpb.Duration, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["google.protobuf.Duration.seconds"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.GetSeconds())))
	}
	if _, ok := ignore["google.protobuf.Duration.nanos"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.GetNanos())))
	}
}

func google_protobuf_Timestamp_hashpb_sum(m *timestamppb.Timestamp, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["google.protobuf.Timestamp.seconds"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.GetSeconds())))
	}
	if _, ok := ignore["google.protobuf.Timestamp.nanos"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.GetNanos())))
	}
}
