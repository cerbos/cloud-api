// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cerbos/cloud/bundle/v1/bundle.proto

package bundlev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/cerbos/cloud-api/genpb/cerbos/cloud/bundle/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CerbosBundleServiceName is the fully-qualified name of the CerbosBundleService service.
	CerbosBundleServiceName = "cerbos.cloud.bundle.v1.CerbosBundleService"
)

// CerbosBundleServiceClient is a client for the cerbos.cloud.bundle.v1.CerbosBundleService service.
type CerbosBundleServiceClient interface {
	GetBundle(context.Context, *connect_go.Request[v1.GetBundleRequest]) (*connect_go.Response[v1.GetBundleResponse], error)
	WatchBundle(context.Context) *connect_go.BidiStreamForClient[v1.WatchBundleRequest, v1.WatchBundleResponse]
}

// NewCerbosBundleServiceClient constructs a client for the
// cerbos.cloud.bundle.v1.CerbosBundleService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCerbosBundleServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CerbosBundleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &cerbosBundleServiceClient{
		getBundle: connect_go.NewClient[v1.GetBundleRequest, v1.GetBundleResponse](
			httpClient,
			baseURL+"/cerbos.cloud.bundle.v1.CerbosBundleService/GetBundle",
			opts...,
		),
		watchBundle: connect_go.NewClient[v1.WatchBundleRequest, v1.WatchBundleResponse](
			httpClient,
			baseURL+"/cerbos.cloud.bundle.v1.CerbosBundleService/WatchBundle",
			opts...,
		),
	}
}

// cerbosBundleServiceClient implements CerbosBundleServiceClient.
type cerbosBundleServiceClient struct {
	getBundle   *connect_go.Client[v1.GetBundleRequest, v1.GetBundleResponse]
	watchBundle *connect_go.Client[v1.WatchBundleRequest, v1.WatchBundleResponse]
}

// GetBundle calls cerbos.cloud.bundle.v1.CerbosBundleService.GetBundle.
func (c *cerbosBundleServiceClient) GetBundle(ctx context.Context, req *connect_go.Request[v1.GetBundleRequest]) (*connect_go.Response[v1.GetBundleResponse], error) {
	return c.getBundle.CallUnary(ctx, req)
}

// WatchBundle calls cerbos.cloud.bundle.v1.CerbosBundleService.WatchBundle.
func (c *cerbosBundleServiceClient) WatchBundle(ctx context.Context) *connect_go.BidiStreamForClient[v1.WatchBundleRequest, v1.WatchBundleResponse] {
	return c.watchBundle.CallBidiStream(ctx)
}

// CerbosBundleServiceHandler is an implementation of the cerbos.cloud.bundle.v1.CerbosBundleService
// service.
type CerbosBundleServiceHandler interface {
	GetBundle(context.Context, *connect_go.Request[v1.GetBundleRequest]) (*connect_go.Response[v1.GetBundleResponse], error)
	WatchBundle(context.Context, *connect_go.BidiStream[v1.WatchBundleRequest, v1.WatchBundleResponse]) error
}

// NewCerbosBundleServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCerbosBundleServiceHandler(svc CerbosBundleServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/cerbos.cloud.bundle.v1.CerbosBundleService/GetBundle", connect_go.NewUnaryHandler(
		"/cerbos.cloud.bundle.v1.CerbosBundleService/GetBundle",
		svc.GetBundle,
		opts...,
	))
	mux.Handle("/cerbos.cloud.bundle.v1.CerbosBundleService/WatchBundle", connect_go.NewBidiStreamHandler(
		"/cerbos.cloud.bundle.v1.CerbosBundleService/WatchBundle",
		svc.WatchBundle,
		opts...,
	))
	return "/cerbos.cloud.bundle.v1.CerbosBundleService/", mux
}

// UnimplementedCerbosBundleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCerbosBundleServiceHandler struct{}

func (UnimplementedCerbosBundleServiceHandler) GetBundle(context.Context, *connect_go.Request[v1.GetBundleRequest]) (*connect_go.Response[v1.GetBundleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cerbos.cloud.bundle.v1.CerbosBundleService.GetBundle is not implemented"))
}

func (UnimplementedCerbosBundleServiceHandler) WatchBundle(context.Context, *connect_go.BidiStream[v1.WatchBundleRequest, v1.WatchBundleResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("cerbos.cloud.bundle.v1.CerbosBundleService.WatchBundle is not implemented"))
}
