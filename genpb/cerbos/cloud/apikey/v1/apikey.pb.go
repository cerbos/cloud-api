// Copyright 2021-2025 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: cerbos/cloud/apikey/v1/apikey.proto

package apikeyv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IssueAccessTokenRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret  string                 `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssueAccessTokenRequest) Reset() {
	*x = IssueAccessTokenRequest{}
	mi := &file_cerbos_cloud_apikey_v1_apikey_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueAccessTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueAccessTokenRequest) ProtoMessage() {}

func (x *IssueAccessTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_apikey_v1_apikey_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueAccessTokenRequest.ProtoReflect.Descriptor instead.
func (*IssueAccessTokenRequest) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_apikey_v1_apikey_proto_rawDescGZIP(), []int{0}
}

func (x *IssueAccessTokenRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *IssueAccessTokenRequest) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

type IssueAccessTokenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessToken   string                 `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	ExpiresIn     *durationpb.Duration   `protobuf:"bytes,2,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssueAccessTokenResponse) Reset() {
	*x = IssueAccessTokenResponse{}
	mi := &file_cerbos_cloud_apikey_v1_apikey_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueAccessTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueAccessTokenResponse) ProtoMessage() {}

func (x *IssueAccessTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cerbos_cloud_apikey_v1_apikey_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueAccessTokenResponse.ProtoReflect.Descriptor instead.
func (*IssueAccessTokenResponse) Descriptor() ([]byte, []int) {
	return file_cerbos_cloud_apikey_v1_apikey_proto_rawDescGZIP(), []int{1}
}

func (x *IssueAccessTokenResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *IssueAccessTokenResponse) GetExpiresIn() *durationpb.Duration {
	if x != nil {
		return x.ExpiresIn
	}
	return nil
}

var File_cerbos_cloud_apikey_v1_apikey_proto protoreflect.FileDescriptor

const file_cerbos_cloud_apikey_v1_apikey_proto_rawDesc = "" +
	"\n" +
	"#cerbos/cloud/apikey/v1/apikey.proto\x12\x16cerbos.cloud.apikey.v1\x1a\x1bbuf/validate/validate.proto\x1a\x1bgoogle/api/visibility.proto\x1a\x1egoogle/protobuf/duration.proto\"n\n" +
	"\x17IssueAccessTokenRequest\x12%\n" +
	"\tclient_id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\x98\x01\fR\bclientId\x12,\n" +
	"\rclient_secret\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\fclientSecret\"\x88\x01\n" +
	"\x18IssueAccessTokenResponse\x12*\n" +
	"\faccess_token\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\vaccessToken\x12@\n" +
	"\n" +
	"expires_in\x18\x02 \x01(\v2\x19.google.protobuf.DurationB\x06\xbaH\x03\xc8\x01\x01R\texpiresIn2\x9e\x01\n" +
	"\rApiKeyService\x12w\n" +
	"\x10IssueAccessToken\x12/.cerbos.cloud.apikey.v1.IssueAccessTokenRequest\x1a0.cerbos.cloud.apikey.v1.IssueAccessTokenResponse\"\x00\x1a\x14\xfa\xd2\xe4\x93\x02\x0e\x12\fEXPERIMENTALBCZAgithub.com/cerbos/cloud-api/genpb/cerbos/cloud/apikey/v1;apikeyv1b\x06proto3"

var (
	file_cerbos_cloud_apikey_v1_apikey_proto_rawDescOnce sync.Once
	file_cerbos_cloud_apikey_v1_apikey_proto_rawDescData []byte
)

func file_cerbos_cloud_apikey_v1_apikey_proto_rawDescGZIP() []byte {
	file_cerbos_cloud_apikey_v1_apikey_proto_rawDescOnce.Do(func() {
		file_cerbos_cloud_apikey_v1_apikey_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cerbos_cloud_apikey_v1_apikey_proto_rawDesc), len(file_cerbos_cloud_apikey_v1_apikey_proto_rawDesc)))
	})
	return file_cerbos_cloud_apikey_v1_apikey_proto_rawDescData
}

var file_cerbos_cloud_apikey_v1_apikey_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_cerbos_cloud_apikey_v1_apikey_proto_goTypes = []any{
	(*IssueAccessTokenRequest)(nil),  // 0: cerbos.cloud.apikey.v1.IssueAccessTokenRequest
	(*IssueAccessTokenResponse)(nil), // 1: cerbos.cloud.apikey.v1.IssueAccessTokenResponse
	(*durationpb.Duration)(nil),      // 2: google.protobuf.Duration
}
var file_cerbos_cloud_apikey_v1_apikey_proto_depIdxs = []int32{
	2, // 0: cerbos.cloud.apikey.v1.IssueAccessTokenResponse.expires_in:type_name -> google.protobuf.Duration
	0, // 1: cerbos.cloud.apikey.v1.ApiKeyService.IssueAccessToken:input_type -> cerbos.cloud.apikey.v1.IssueAccessTokenRequest
	1, // 2: cerbos.cloud.apikey.v1.ApiKeyService.IssueAccessToken:output_type -> cerbos.cloud.apikey.v1.IssueAccessTokenResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_cerbos_cloud_apikey_v1_apikey_proto_init() }
func file_cerbos_cloud_apikey_v1_apikey_proto_init() {
	if File_cerbos_cloud_apikey_v1_apikey_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cerbos_cloud_apikey_v1_apikey_proto_rawDesc), len(file_cerbos_cloud_apikey_v1_apikey_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cerbos_cloud_apikey_v1_apikey_proto_goTypes,
		DependencyIndexes: file_cerbos_cloud_apikey_v1_apikey_proto_depIdxs,
		MessageInfos:      file_cerbos_cloud_apikey_v1_apikey_proto_msgTypes,
	}.Build()
	File_cerbos_cloud_apikey_v1_apikey_proto = out.File
	file_cerbos_cloud_apikey_v1_apikey_proto_goTypes = nil
	file_cerbos_cloud_apikey_v1_apikey_proto_depIdxs = nil
}
