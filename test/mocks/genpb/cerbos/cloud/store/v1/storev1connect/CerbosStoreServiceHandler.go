// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright 2021-2025 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

package mockstorev1connect

import (
	"context"

	"connectrpc.com/connect"
	storev1 "github.com/cerbos/cloud-api/genpb/cerbos/cloud/store/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewCerbosStoreServiceHandler creates a new instance of CerbosStoreServiceHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCerbosStoreServiceHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *CerbosStoreServiceHandler {
	mock := &CerbosStoreServiceHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CerbosStoreServiceHandler is an autogenerated mock type for the CerbosStoreServiceHandler type
type CerbosStoreServiceHandler struct {
	mock.Mock
}

type CerbosStoreServiceHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *CerbosStoreServiceHandler) EXPECT() *CerbosStoreServiceHandler_Expecter {
	return &CerbosStoreServiceHandler_Expecter{mock: &_m.Mock}
}

// GetFiles provides a mock function for the type CerbosStoreServiceHandler
func (_mock *CerbosStoreServiceHandler) GetFiles(context1 context.Context, request *connect.Request[storev1.GetFilesRequest]) (*connect.Response[storev1.GetFilesResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for GetFiles")
	}

	var r0 *connect.Response[storev1.GetFilesResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[storev1.GetFilesRequest]) (*connect.Response[storev1.GetFilesResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[storev1.GetFilesRequest]) *connect.Response[storev1.GetFilesResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[storev1.GetFilesResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[storev1.GetFilesRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CerbosStoreServiceHandler_GetFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFiles'
type CerbosStoreServiceHandler_GetFiles_Call struct {
	*mock.Call
}

// GetFiles is a helper method to define mock.On call
//   - context1
//   - request
func (_e *CerbosStoreServiceHandler_Expecter) GetFiles(context1 interface{}, request interface{}) *CerbosStoreServiceHandler_GetFiles_Call {
	return &CerbosStoreServiceHandler_GetFiles_Call{Call: _e.mock.On("GetFiles", context1, request)}
}

func (_c *CerbosStoreServiceHandler_GetFiles_Call) Run(run func(context1 context.Context, request *connect.Request[storev1.GetFilesRequest])) *CerbosStoreServiceHandler_GetFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[storev1.GetFilesRequest]))
	})
	return _c
}

func (_c *CerbosStoreServiceHandler_GetFiles_Call) Return(response *connect.Response[storev1.GetFilesResponse], err error) *CerbosStoreServiceHandler_GetFiles_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *CerbosStoreServiceHandler_GetFiles_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[storev1.GetFilesRequest]) (*connect.Response[storev1.GetFilesResponse], error)) *CerbosStoreServiceHandler_GetFiles_Call {
	_c.Call.Return(run)
	return _c
}

// ListFiles provides a mock function for the type CerbosStoreServiceHandler
func (_mock *CerbosStoreServiceHandler) ListFiles(context1 context.Context, request *connect.Request[storev1.ListFilesRequest]) (*connect.Response[storev1.ListFilesResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for ListFiles")
	}

	var r0 *connect.Response[storev1.ListFilesResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[storev1.ListFilesRequest]) (*connect.Response[storev1.ListFilesResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[storev1.ListFilesRequest]) *connect.Response[storev1.ListFilesResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[storev1.ListFilesResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[storev1.ListFilesRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CerbosStoreServiceHandler_ListFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFiles'
type CerbosStoreServiceHandler_ListFiles_Call struct {
	*mock.Call
}

// ListFiles is a helper method to define mock.On call
//   - context1
//   - request
func (_e *CerbosStoreServiceHandler_Expecter) ListFiles(context1 interface{}, request interface{}) *CerbosStoreServiceHandler_ListFiles_Call {
	return &CerbosStoreServiceHandler_ListFiles_Call{Call: _e.mock.On("ListFiles", context1, request)}
}

func (_c *CerbosStoreServiceHandler_ListFiles_Call) Run(run func(context1 context.Context, request *connect.Request[storev1.ListFilesRequest])) *CerbosStoreServiceHandler_ListFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[storev1.ListFilesRequest]))
	})
	return _c
}

func (_c *CerbosStoreServiceHandler_ListFiles_Call) Return(response *connect.Response[storev1.ListFilesResponse], err error) *CerbosStoreServiceHandler_ListFiles_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *CerbosStoreServiceHandler_ListFiles_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[storev1.ListFilesRequest]) (*connect.Response[storev1.ListFilesResponse], error)) *CerbosStoreServiceHandler_ListFiles_Call {
	_c.Call.Return(run)
	return _c
}

// ModifyFiles provides a mock function for the type CerbosStoreServiceHandler
func (_mock *CerbosStoreServiceHandler) ModifyFiles(context1 context.Context, request *connect.Request[storev1.ModifyFilesRequest]) (*connect.Response[storev1.ModifyFilesResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for ModifyFiles")
	}

	var r0 *connect.Response[storev1.ModifyFilesResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[storev1.ModifyFilesRequest]) (*connect.Response[storev1.ModifyFilesResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[storev1.ModifyFilesRequest]) *connect.Response[storev1.ModifyFilesResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[storev1.ModifyFilesResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[storev1.ModifyFilesRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CerbosStoreServiceHandler_ModifyFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModifyFiles'
type CerbosStoreServiceHandler_ModifyFiles_Call struct {
	*mock.Call
}

// ModifyFiles is a helper method to define mock.On call
//   - context1
//   - request
func (_e *CerbosStoreServiceHandler_Expecter) ModifyFiles(context1 interface{}, request interface{}) *CerbosStoreServiceHandler_ModifyFiles_Call {
	return &CerbosStoreServiceHandler_ModifyFiles_Call{Call: _e.mock.On("ModifyFiles", context1, request)}
}

func (_c *CerbosStoreServiceHandler_ModifyFiles_Call) Run(run func(context1 context.Context, request *connect.Request[storev1.ModifyFilesRequest])) *CerbosStoreServiceHandler_ModifyFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[storev1.ModifyFilesRequest]))
	})
	return _c
}

func (_c *CerbosStoreServiceHandler_ModifyFiles_Call) Return(response *connect.Response[storev1.ModifyFilesResponse], err error) *CerbosStoreServiceHandler_ModifyFiles_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *CerbosStoreServiceHandler_ModifyFiles_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[storev1.ModifyFilesRequest]) (*connect.Response[storev1.ModifyFilesResponse], error)) *CerbosStoreServiceHandler_ModifyFiles_Call {
	_c.Call.Return(run)
	return _c
}

// ReplaceFiles provides a mock function for the type CerbosStoreServiceHandler
func (_mock *CerbosStoreServiceHandler) ReplaceFiles(context1 context.Context, request *connect.Request[storev1.ReplaceFilesRequest]) (*connect.Response[storev1.ReplaceFilesResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for ReplaceFiles")
	}

	var r0 *connect.Response[storev1.ReplaceFilesResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[storev1.ReplaceFilesRequest]) (*connect.Response[storev1.ReplaceFilesResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[storev1.ReplaceFilesRequest]) *connect.Response[storev1.ReplaceFilesResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[storev1.ReplaceFilesResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[storev1.ReplaceFilesRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CerbosStoreServiceHandler_ReplaceFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplaceFiles'
type CerbosStoreServiceHandler_ReplaceFiles_Call struct {
	*mock.Call
}

// ReplaceFiles is a helper method to define mock.On call
//   - context1
//   - request
func (_e *CerbosStoreServiceHandler_Expecter) ReplaceFiles(context1 interface{}, request interface{}) *CerbosStoreServiceHandler_ReplaceFiles_Call {
	return &CerbosStoreServiceHandler_ReplaceFiles_Call{Call: _e.mock.On("ReplaceFiles", context1, request)}
}

func (_c *CerbosStoreServiceHandler_ReplaceFiles_Call) Run(run func(context1 context.Context, request *connect.Request[storev1.ReplaceFilesRequest])) *CerbosStoreServiceHandler_ReplaceFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[storev1.ReplaceFilesRequest]))
	})
	return _c
}

func (_c *CerbosStoreServiceHandler_ReplaceFiles_Call) Return(response *connect.Response[storev1.ReplaceFilesResponse], err error) *CerbosStoreServiceHandler_ReplaceFiles_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *CerbosStoreServiceHandler_ReplaceFiles_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[storev1.ReplaceFilesRequest]) (*connect.Response[storev1.ReplaceFilesResponse], error)) *CerbosStoreServiceHandler_ReplaceFiles_Call {
	_c.Call.Return(run)
	return _c
}
