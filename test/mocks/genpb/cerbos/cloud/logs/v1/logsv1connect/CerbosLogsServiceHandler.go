// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright 2021-2025 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

package mocklogsv1connect

import (
	"context"

	"connectrpc.com/connect"
	logsv1 "github.com/cerbos/cloud-api/genpb/cerbos/cloud/logs/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewCerbosLogsServiceHandler creates a new instance of CerbosLogsServiceHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCerbosLogsServiceHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *CerbosLogsServiceHandler {
	mock := &CerbosLogsServiceHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CerbosLogsServiceHandler is an autogenerated mock type for the CerbosLogsServiceHandler type
type CerbosLogsServiceHandler struct {
	mock.Mock
}

type CerbosLogsServiceHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *CerbosLogsServiceHandler) EXPECT() *CerbosLogsServiceHandler_Expecter {
	return &CerbosLogsServiceHandler_Expecter{mock: &_m.Mock}
}

// Ingest provides a mock function for the type CerbosLogsServiceHandler
func (_mock *CerbosLogsServiceHandler) Ingest(context1 context.Context, request *connect.Request[logsv1.IngestRequest]) (*connect.Response[logsv1.IngestResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for Ingest")
	}

	var r0 *connect.Response[logsv1.IngestResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[logsv1.IngestRequest]) (*connect.Response[logsv1.IngestResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[logsv1.IngestRequest]) *connect.Response[logsv1.IngestResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[logsv1.IngestResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[logsv1.IngestRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CerbosLogsServiceHandler_Ingest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ingest'
type CerbosLogsServiceHandler_Ingest_Call struct {
	*mock.Call
}

// Ingest is a helper method to define mock.On call
//   - context1
//   - request
func (_e *CerbosLogsServiceHandler_Expecter) Ingest(context1 interface{}, request interface{}) *CerbosLogsServiceHandler_Ingest_Call {
	return &CerbosLogsServiceHandler_Ingest_Call{Call: _e.mock.On("Ingest", context1, request)}
}

func (_c *CerbosLogsServiceHandler_Ingest_Call) Run(run func(context1 context.Context, request *connect.Request[logsv1.IngestRequest])) *CerbosLogsServiceHandler_Ingest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*connect.Request[logsv1.IngestRequest]))
	})
	return _c
}

func (_c *CerbosLogsServiceHandler_Ingest_Call) Return(response *connect.Response[logsv1.IngestResponse], err error) *CerbosLogsServiceHandler_Ingest_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *CerbosLogsServiceHandler_Ingest_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[logsv1.IngestRequest]) (*connect.Response[logsv1.IngestResponse], error)) *CerbosLogsServiceHandler_Ingest_Call {
	_c.Call.Return(run)
	return _c
}
