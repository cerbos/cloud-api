// Copyright 2021-2023 Zenauth Ltd.

syntax = "proto3";

package cerbos.cloud.bundle.v1;

import "cerbos/cloud/pdp/v1/pdp.proto";
import "google/api/visibility.proto";
import "google/protobuf/duration.proto";
import "validate/validate.proto";

option go_package = "github.com/cerbos/cloud-api/genpb/cerbos/cloud/bundle/v1;bundlev1";

// BundleInfo holds information about a bundle and its download URLs.
message BundleInfo {
  message Segment {
    uint32 segment_id = 1 [(validate.rules).uint32.gt = 0];
    bytes checksum = 2 [(validate.rules).bytes.len = 32];
    repeated string download_urls = 3 [(validate.rules).repeated = {
      unique: true,
      min_items: 1,
      items {
        string {min_len: 1}
      }
    }];
  }

  string label = 1 [(validate.rules).string.min_len = 1];
  bytes bundle_hash = 2 [(validate.rules).bytes.len = 32];
  repeated Segment segments = 3 [(validate.rules).repeated.min_items = 1];
}

message Meta {
  string identifier = 1;
  string source = 2;
}

message Manifest {
  string api_version = 1;
  map<string, string> policy_index = 2;
  repeated string schemas = 3;
  Meta meta = 4;
}

message GetBundleRequest {
  cerbos.cloud.pdp.v1.Identifier pdp_id = 1 [(validate.rules).message.required = true];
  string bundle_label = 2 [(validate.rules).string.min_len = 1];
}

message GetBundleResponse {
  BundleInfo bundle_info = 1 [(validate.rules).message.required = true];
}

message WatchBundleRequest {
  cerbos.cloud.pdp.v1.Identifier pdp_id = 1 [(validate.rules).message.required = true];
  string bundle_label = 2 [(validate.rules).string.min_len = 1];
}

message WatchBundleResponse {
  message Reconnect {
    google.protobuf.Duration backoff = 1;
    string reason = 2;
  }

  message BundleRemoved {}

  oneof msg {
    option (validate.required) = true;
    BundleInfo bundle_update = 1;
    Reconnect reconnect = 2;
    BundleRemoved bundle_removed = 3;
  }
}

service CerbosBundleService {
  option (google.api.api_visibility).restriction = "EXPERIMENTAL";

  rpc GetBundle(GetBundleRequest) returns (GetBundleResponse) {}
  rpc WatchBundle(WatchBundleRequest) returns (stream WatchBundleResponse) {}
}
