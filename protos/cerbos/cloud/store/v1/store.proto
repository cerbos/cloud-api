// Copyright 2021-2025 Zenauth Ltd.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package cerbos.cloud.store.v1;

import "buf/validate/validate.proto";
import "cerbos/policy/v1/policy.proto";
import "google/api/field_behavior.proto";
import "google/api/visibility.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/cerbos/cloud-api/genpb/cerbos/cloud/store/v1;storev1";

message StringMatch {
  message InList {
    repeated string values = 1 [(buf.validate.field).repeated = {
      max_items: 10
      items: {
        string: {min_len: 1}
      }
    }];
  }

  oneof match {
    option (buf.validate.oneof).required = true;
    string equals = 1;
    string like = 2;
    InList in = 3;
  }
}

enum FileKind {
  FILE_KIND_UNSPECIFIED = 0;
  FILE_KIND_POLICY = 1;
  FILE_KIND_SCHEMA = 2;
  FILE_KIND_TEST = 3;
  FILE_KIND_TEST_DATA = 4;
}

message FileFilter {
  repeated FileKind kinds = 1 [
    (google.api.field_behavior) = OPTIONAL,
    (buf.validate.field).repeated = {
      unique: true
      items: {
        enum: {
          not_in: [0]
          defined_only: true
        }
      }
    }
  ];
  optional StringMatch path = 2;
}

message ListFilesRequest {
  string store_id = 1 [(buf.validate.field).string.len = 12];
  optional FileFilter filter = 2;
}

message ListFilesResponse {
  message File {
    string path = 1;
    FileKind kind = 2;
  }
  int64 store_version = 1;
  repeated File files = 2;
}

message GetFilesRequest {
  string store_id = 1 [(buf.validate.field).string.len = 12];
  repeated string paths = 2 [(buf.validate.field).repeated = {
    min_items: 1
    unique: true
    items: {
      string: {min_len: 1}
    }
  }];
}

message File {
  FileKind kind = 1;
  string path = 2;
  bytes contents = 3;
}

message GetFilesResponse {
  int64 store_version = 1;
  map<string, File> files = 2;
}

message FileOp {
  oneof op {
    option (buf.validate.oneof).required = true;
    File add_or_update = 1;
    string delete = 2;
  }
}

message ModifyFilesRequest {
  message Condition {
    int64 store_version_must_equal = 1 [(buf.validate.field).int64.gte = 0];
  }

  string store_id = 1 [(buf.validate.field).string.len = 12];
  optional Condition condition = 2;
  repeated FileOp operations = 3 [(buf.validate.field).repeated.min_items = 1];
}

message ModifyFilesResponse {
  int64 new_store_version = 1;
}

service CerbosStoreService {
  option (google.api.api_visibility).restriction = "EXPERIMENTAL";

  rpc ListFiles(ListFilesRequest) returns (ListFilesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc GetFiles(GetFilesRequest) returns (GetFilesResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc ModifyFiles(ModifyFilesRequest) returns (ModifyFilesResponse) {}
}
